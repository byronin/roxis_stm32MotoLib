
PWM_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002768  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002874  08002874  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08002874  08002874  00012874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  0800287c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  20000014  08002890  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000004c  08002890  0002004c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002ba2  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000aad  00000000  00000000  00022bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000400  00000000  00000000  00023690  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  00023a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001db0  00000000  00000000  00023e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001488  00000000  00000000  00025bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00027050  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000f70  00000000  00000000  000270cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002803c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	0800285c 	.word	0x0800285c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	0800285c 	.word	0x0800285c

0800014c <FLASH_SetLatency>:
  *     @arg FLASH_Latency_1: FLASH One Latency cycle
  *     @arg FLASH_Latency_2: FLASH Two Latency cycles
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 8000158:	4b09      	ldr	r3, [pc, #36]	; (8000180 <FLASH_SetLatency+0x34>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	60fb      	str	r3, [r7, #12]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000164:	60fb      	str	r3, [r7, #12]
  tmpreg |= FLASH_Latency;
 8000166:	68fa      	ldr	r2, [r7, #12]
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	4313      	orrs	r3, r2
 800016c:	60fb      	str	r3, [r7, #12]
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 800016e:	4a04      	ldr	r2, [pc, #16]	; (8000180 <FLASH_SetLatency+0x34>)
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	6013      	str	r3, [r2, #0]
}
 8000174:	bf00      	nop
 8000176:	3714      	adds	r7, #20
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	40022000 	.word	0x40022000

08000184 <FLASH_PrefetchBufferCmd>:
  *     @arg FLASH_PrefetchBuffer_Enable: FLASH Prefetch Buffer Enable
  *     @arg FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
  * @retval None
  */
void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 800018c:	4a08      	ldr	r2, [pc, #32]	; (80001b0 <FLASH_PrefetchBufferCmd+0x2c>)
 800018e:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <FLASH_PrefetchBufferCmd+0x2c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	f023 0310 	bic.w	r3, r3, #16
 8000196:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8000198:	4905      	ldr	r1, [pc, #20]	; (80001b0 <FLASH_PrefetchBufferCmd+0x2c>)
 800019a:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <FLASH_PrefetchBufferCmd+0x2c>)
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	4313      	orrs	r3, r2
 80001a2:	600b      	str	r3, [r1, #0]
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	40022000 	.word	0x40022000

080001b4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b089      	sub	sp, #36	; 0x24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80001be:	2300      	movs	r3, #0
 80001c0:	61fb      	str	r3, [r7, #28]
 80001c2:	2300      	movs	r3, #0
 80001c4:	613b      	str	r3, [r7, #16]
 80001c6:	2300      	movs	r3, #0
 80001c8:	61bb      	str	r3, [r7, #24]
 80001ca:	2300      	movs	r3, #0
 80001cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80001ce:	2300      	movs	r3, #0
 80001d0:	617b      	str	r3, [r7, #20]
 80001d2:	2300      	movs	r3, #0
 80001d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	78db      	ldrb	r3, [r3, #3]
 80001da:	f003 030f 	and.w	r3, r3, #15
 80001de:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	78db      	ldrb	r3, [r3, #3]
 80001e4:	f003 0310 	and.w	r3, r3, #16
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d005      	beq.n	80001f8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	789b      	ldrb	r3, [r3, #2]
 80001f0:	461a      	mov	r2, r3
 80001f2:	69fb      	ldr	r3, [r7, #28]
 80001f4:	4313      	orrs	r3, r2
 80001f6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	881b      	ldrh	r3, [r3, #0]
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d044      	beq.n	800028c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000208:	2300      	movs	r3, #0
 800020a:	61bb      	str	r3, [r7, #24]
 800020c:	e038      	b.n	8000280 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800020e:	2201      	movs	r2, #1
 8000210:	69bb      	ldr	r3, [r7, #24]
 8000212:	fa02 f303 	lsl.w	r3, r2, r3
 8000216:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	881b      	ldrh	r3, [r3, #0]
 800021c:	461a      	mov	r2, r3
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	4013      	ands	r3, r2
 8000222:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000224:	693a      	ldr	r2, [r7, #16]
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	429a      	cmp	r2, r3
 800022a:	d126      	bne.n	800027a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800022c:	69bb      	ldr	r3, [r7, #24]
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000232:	220f      	movs	r2, #15
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	fa02 f303 	lsl.w	r3, r2, r3
 800023a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	43db      	mvns	r3, r3
 8000240:	697a      	ldr	r2, [r7, #20]
 8000242:	4013      	ands	r3, r2
 8000244:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000246:	69fa      	ldr	r2, [r7, #28]
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	fa02 f303 	lsl.w	r3, r2, r3
 800024e:	697a      	ldr	r2, [r7, #20]
 8000250:	4313      	orrs	r3, r2
 8000252:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	78db      	ldrb	r3, [r3, #3]
 8000258:	2b28      	cmp	r3, #40	; 0x28
 800025a:	d105      	bne.n	8000268 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800025c:	2201      	movs	r2, #1
 800025e:	69bb      	ldr	r3, [r7, #24]
 8000260:	409a      	lsls	r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	615a      	str	r2, [r3, #20]
 8000266:	e008      	b.n	800027a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	78db      	ldrb	r3, [r3, #3]
 800026c:	2b48      	cmp	r3, #72	; 0x48
 800026e:	d104      	bne.n	800027a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000270:	2201      	movs	r2, #1
 8000272:	69bb      	ldr	r3, [r7, #24]
 8000274:	409a      	lsls	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800027a:	69bb      	ldr	r3, [r7, #24]
 800027c:	3301      	adds	r3, #1
 800027e:	61bb      	str	r3, [r7, #24]
 8000280:	69bb      	ldr	r3, [r7, #24]
 8000282:	2b07      	cmp	r3, #7
 8000284:	d9c3      	bls.n	800020e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	697a      	ldr	r2, [r7, #20]
 800028a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	881b      	ldrh	r3, [r3, #0]
 8000290:	2bff      	cmp	r3, #255	; 0xff
 8000292:	d946      	bls.n	8000322 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800029a:	2300      	movs	r3, #0
 800029c:	61bb      	str	r3, [r7, #24]
 800029e:	e03a      	b.n	8000316 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80002a0:	69bb      	ldr	r3, [r7, #24]
 80002a2:	3308      	adds	r3, #8
 80002a4:	2201      	movs	r2, #1
 80002a6:	fa02 f303 	lsl.w	r3, r2, r3
 80002aa:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	881b      	ldrh	r3, [r3, #0]
 80002b0:	461a      	mov	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	4013      	ands	r3, r2
 80002b6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80002b8:	693a      	ldr	r2, [r7, #16]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d127      	bne.n	8000310 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80002c0:	69bb      	ldr	r3, [r7, #24]
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80002c6:	220f      	movs	r2, #15
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	fa02 f303 	lsl.w	r3, r2, r3
 80002ce:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	43db      	mvns	r3, r3
 80002d4:	697a      	ldr	r2, [r7, #20]
 80002d6:	4013      	ands	r3, r2
 80002d8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002da:	69fa      	ldr	r2, [r7, #28]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	fa02 f303 	lsl.w	r3, r2, r3
 80002e2:	697a      	ldr	r2, [r7, #20]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	78db      	ldrb	r3, [r3, #3]
 80002ec:	2b28      	cmp	r3, #40	; 0x28
 80002ee:	d105      	bne.n	80002fc <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002f0:	69bb      	ldr	r3, [r7, #24]
 80002f2:	3308      	adds	r3, #8
 80002f4:	2201      	movs	r2, #1
 80002f6:	409a      	lsls	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	78db      	ldrb	r3, [r3, #3]
 8000300:	2b48      	cmp	r3, #72	; 0x48
 8000302:	d105      	bne.n	8000310 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000304:	69bb      	ldr	r3, [r7, #24]
 8000306:	3308      	adds	r3, #8
 8000308:	2201      	movs	r2, #1
 800030a:	409a      	lsls	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000310:	69bb      	ldr	r3, [r7, #24]
 8000312:	3301      	adds	r3, #1
 8000314:	61bb      	str	r3, [r7, #24]
 8000316:	69bb      	ldr	r3, [r7, #24]
 8000318:	2b07      	cmp	r3, #7
 800031a:	d9c1      	bls.n	80002a0 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	697a      	ldr	r2, [r7, #20]
 8000320:	605a      	str	r2, [r3, #4]
  }
}
 8000322:	bf00      	nop
 8000324:	3724      	adds	r7, #36	; 0x24
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	807b      	strh	r3, [r7, #2]
 8000338:	4613      	mov	r3, r2
 800033a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800033c:	787b      	ldrb	r3, [r7, #1]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d003      	beq.n	800034a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000342:	887a      	ldrh	r2, [r7, #2]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8000348:	e002      	b.n	8000350 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 800034a:	887a      	ldrh	r2, [r7, #2]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	615a      	str	r2, [r3, #20]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
	...

0800035c <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000360:	4a13      	ldr	r2, [pc, #76]	; (80003b0 <RCC_DeInit+0x54>)
 8000362:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <RCC_DeInit+0x54>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800036c:	4910      	ldr	r1, [pc, #64]	; (80003b0 <RCC_DeInit+0x54>)
 800036e:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <RCC_DeInit+0x54>)
 8000370:	685a      	ldr	r2, [r3, #4]
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <RCC_DeInit+0x58>)
 8000374:	4013      	ands	r3, r2
 8000376:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <RCC_DeInit+0x54>)
 800037a:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <RCC_DeInit+0x54>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000386:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000388:	4a09      	ldr	r2, [pc, #36]	; (80003b0 <RCC_DeInit+0x54>)
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <RCC_DeInit+0x54>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000392:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000394:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <RCC_DeInit+0x54>)
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <RCC_DeInit+0x54>)
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800039e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <RCC_DeInit+0x54>)
 80003a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003a6:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40021000 	.word	0x40021000
 80003b4:	f8ff0000 	.word	0xf8ff0000

080003b8 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80003c0:	4a13      	ldr	r2, [pc, #76]	; (8000410 <RCC_HSEConfig+0x58>)
 80003c2:	4b13      	ldr	r3, [pc, #76]	; (8000410 <RCC_HSEConfig+0x58>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ca:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80003cc:	4a10      	ldr	r2, [pc, #64]	; (8000410 <RCC_HSEConfig+0x58>)
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <RCC_HSEConfig+0x58>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003d6:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80003de:	d003      	beq.n	80003e8 <RCC_HSEConfig+0x30>
 80003e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80003e4:	d007      	beq.n	80003f6 <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 80003e6:	e00d      	b.n	8000404 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEON_Set;
 80003e8:	4a09      	ldr	r2, [pc, #36]	; (8000410 <RCC_HSEConfig+0x58>)
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <RCC_HSEConfig+0x58>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003f2:	6013      	str	r3, [r2, #0]
      break;
 80003f4:	e006      	b.n	8000404 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80003f6:	4a06      	ldr	r2, [pc, #24]	; (8000410 <RCC_HSEConfig+0x58>)
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <RCC_HSEConfig+0x58>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000400:	6013      	str	r3, [r2, #0]
      break;
 8000402:	bf00      	nop
  }
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000

08000414 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800041e:	2300      	movs	r3, #0
 8000420:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8000422:	2300      	movs	r3, #0
 8000424:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000426:	2031      	movs	r0, #49	; 0x31
 8000428:	f000 f8e6 	bl	80005f8 <RCC_GetFlagStatus>
 800042c:	4603      	mov	r3, r0
 800042e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	3301      	adds	r3, #1
 8000434:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800043c:	d002      	beq.n	8000444 <RCC_WaitForHSEStartUp+0x30>
 800043e:	79bb      	ldrb	r3, [r7, #6]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d0f0      	beq.n	8000426 <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000444:	2031      	movs	r0, #49	; 0x31
 8000446:	f000 f8d7 	bl	80005f8 <RCC_GetFlagStatus>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d002      	beq.n	8000456 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000450:	2301      	movs	r3, #1
 8000452:	71fb      	strb	r3, [r7, #7]
 8000454:	e001      	b.n	800045a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000456:	2300      	movs	r3, #0
 8000458:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 800045a:	79fb      	ldrb	r3, [r7, #7]
}
 800045c:	4618      	mov	r0, r3
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8000472:	4b0a      	ldr	r3, [pc, #40]	; (800049c <RCC_PLLConfig+0x38>)
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800047e:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	4313      	orrs	r3, r2
 8000486:	68fa      	ldr	r2, [r7, #12]
 8000488:	4313      	orrs	r3, r2
 800048a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800048c:	4a03      	ldr	r2, [pc, #12]	; (800049c <RCC_PLLConfig+0x38>)
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	6053      	str	r3, [r2, #4]
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000

080004a0 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80004aa:	4a04      	ldr	r2, [pc, #16]	; (80004bc <RCC_PLLCmd+0x1c>)
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	6013      	str	r3, [r2, #0]
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	42420060 	.word	0x42420060

080004c0 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <RCC_SYSCLKConfig+0x34>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	f023 0303 	bic.w	r3, r3, #3
 80004d8:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4313      	orrs	r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80004e2:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <RCC_SYSCLKConfig+0x34>)
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	6053      	str	r3, [r2, #4]
}
 80004e8:	bf00      	nop
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000

080004f8 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <RCC_GetSYSCLKSource+0x18>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	f003 030c 	and.w	r3, r3, #12
 8000506:	b2db      	uxtb	r3, r3
}
 8000508:	4618      	mov	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000

08000514 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <RCC_HCLKConfig+0x34>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800052c:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4313      	orrs	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000536:	4a04      	ldr	r2, [pc, #16]	; (8000548 <RCC_HCLKConfig+0x34>)
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	6053      	str	r3, [r2, #4]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <RCC_PCLK1Config+0x34>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000564:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4313      	orrs	r3, r2
 800056c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800056e:	4a04      	ldr	r2, [pc, #16]	; (8000580 <RCC_PCLK1Config+0x34>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	6053      	str	r3, [r2, #4]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <RCC_PCLK2Config+0x34>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800059c:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <RCC_PCLK2Config+0x34>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	6053      	str	r3, [r2, #4]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000

080005bc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d006      	beq.n	80005dc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80005ce:	4909      	ldr	r1, [pc, #36]	; (80005f4 <RCC_APB2PeriphClockCmd+0x38>)
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <RCC_APB2PeriphClockCmd+0x38>)
 80005d2:	699a      	ldr	r2, [r3, #24]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80005da:	e006      	b.n	80005ea <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80005dc:	4905      	ldr	r1, [pc, #20]	; (80005f4 <RCC_APB2PeriphClockCmd+0x38>)
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <RCC_APB2PeriphClockCmd+0x38>)
 80005e0:	699a      	ldr	r2, [r3, #24]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	43db      	mvns	r3, r3
 80005e6:	4013      	ands	r3, r2
 80005e8:	618b      	str	r3, [r1, #24]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	40021000 	.word	0x40021000

080005f8 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800060a:	2300      	movs	r3, #0
 800060c:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	095b      	lsrs	r3, r3, #5
 8000612:	b2db      	uxtb	r3, r3
 8000614:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d103      	bne.n	8000624 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <RCC_GetFlagStatus+0x70>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	e009      	b.n	8000638 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d103      	bne.n	8000632 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <RCC_GetFlagStatus+0x70>)
 800062c:	6a1b      	ldr	r3, [r3, #32]
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	e002      	b.n	8000638 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <RCC_GetFlagStatus+0x70>)
 8000634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000636:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	f003 031f 	and.w	r3, r3, #31
 800063e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	fa22 f303 	lsr.w	r3, r2, r3
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000650:	2301      	movs	r3, #1
 8000652:	74fb      	strb	r3, [r7, #19]
 8000654:	e001      	b.n	800065a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000656:	2300      	movs	r3, #0
 8000658:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 800065a:	7cfb      	ldrb	r3, [r7, #19]
}
 800065c:	4618      	mov	r0, r3
 800065e:	371c      	adds	r7, #28
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <RCC_Configuration>:
#include "PWM.h"

Motor Motor1;												// The object "Motor1" has been set in the Motor structure. The object name (Motor1) depends on the user.
void RCC_Configuration(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	ErrorStatus HSEStartUpStatus;
	RCC_DeInit(); /* RCC system reset(for debug purpose) */
 8000672:	f7ff fe73 	bl	800035c <RCC_DeInit>
	RCC_HSEConfig(RCC_HSE_ON); /* Enable HSE */
 8000676:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800067a:	f7ff fe9d 	bl	80003b8 <RCC_HSEConfig>
	HSEStartUpStatus = RCC_WaitForHSEStartUp(); /* Wait till HSE is ready */
 800067e:	f7ff fec9 	bl	8000414 <RCC_WaitForHSEStartUp>
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]

	if (HSEStartUpStatus == SUCCESS) {
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d127      	bne.n	80006dc <RCC_Configuration+0x70>
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable); /* Enable Prefetch Buffer */
 800068c:	2010      	movs	r0, #16
 800068e:	f7ff fd79 	bl	8000184 <FLASH_PrefetchBufferCmd>
		FLASH_SetLatency(FLASH_Latency_2); /* Flash 2 wait state */
 8000692:	2002      	movs	r0, #2
 8000694:	f7ff fd5a 	bl	800014c <FLASH_SetLatency>
		RCC_HCLKConfig(RCC_SYSCLK_Div1); /* HCLK = SYSCLK */
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ff3b 	bl	8000514 <RCC_HCLKConfig>
		RCC_PCLK2Config(RCC_HCLK_Div1);
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ff70 	bl	8000584 <RCC_PCLK2Config>
		RCC_PCLK1Config(RCC_HCLK_Div1); /* PCLK2 = HCLK */
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff ff51 	bl	800054c <RCC_PCLK1Config>
		//        RCC_PCLK1Config(RCC_HCLK_Div2);                         /* PCLK1 = HCLK/2 */
		//注：AHB主要负责外部存储器时钟。APB2负责AD，I/O，高级TIM，串口1
		//  APB1负责DA，USB，SPI，I2C，CAN，串口2345，普通TIM
		RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_6); /* PLLCLK = 8MHz * 9 = 72 MHz */
 80006aa:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80006ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006b2:	f7ff fed7 	bl	8000464 <RCC_PLLConfig>
		RCC_PLLCmd(ENABLE); /* Enable PLL */
 80006b6:	2001      	movs	r0, #1
 80006b8:	f7ff fef2 	bl	80004a0 <RCC_PLLCmd>

		while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET) /* Wait till PLL is ready */
 80006bc:	bf00      	nop
 80006be:	2039      	movs	r0, #57	; 0x39
 80006c0:	f7ff ff9a 	bl	80005f8 <RCC_GetFlagStatus>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f9      	beq.n	80006be <RCC_Configuration+0x52>
		{
		}

		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); /* Select PLL as system clock source */
 80006ca:	2002      	movs	r0, #2
 80006cc:	f7ff fef8 	bl	80004c0 <RCC_SYSCLKConfig>

		while (RCC_GetSYSCLKSource() != 0x08) /* Wait till PLL is used as system clock source */
 80006d0:	bf00      	nop
 80006d2:	f7ff ff11 	bl	80004f8 <RCC_GetSYSCLKSource>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b08      	cmp	r3, #8
 80006da:	d1fa      	bne.n	80006d2 <RCC_Configuration+0x66>
		{
		}
	}
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <main>:

int main(){
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b087      	sub	sp, #28
 80006e8:	af04      	add	r7, sp, #16
	RCC_Configuration();
 80006ea:	f7ff ffbf 	bl	800066c <RCC_Configuration>
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80006ee:	2101      	movs	r1, #1
 80006f0:	2010      	movs	r0, #16
 80006f2:	f7ff ff63 	bl	80005bc <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80006f6:	2302      	movs	r3, #2
 80006f8:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80006fa:	2310      	movs	r3, #16
 80006fc:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80006fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000702:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	4839      	ldr	r0, [pc, #228]	; (80007f0 <main+0x10c>)
 800070a:	f7ff fd53 	bl	80001b4 <GPIO_Init>

	Motor1.pwm_port = GPIOA;					// Port and pin assignments for pwm
 800070e:	4b39      	ldr	r3, [pc, #228]	; (80007f4 <main+0x110>)
 8000710:	4a39      	ldr	r2, [pc, #228]	; (80007f8 <main+0x114>)
 8000712:	601a      	str	r2, [r3, #0]
	Motor1.pwm_pin = GPIO_Pin_7;			// If pwm not used, pwm_port and pwm_pin assignments are unnecessary.
 8000714:	4b37      	ldr	r3, [pc, #220]	; (80007f4 <main+0x110>)
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	809a      	strh	r2, [r3, #4]

	Motor1.backward_port = GPIOB;			// Port and pin assignments for forward direction
 800071a:	4b36      	ldr	r3, [pc, #216]	; (80007f4 <main+0x110>)
 800071c:	4a37      	ldr	r2, [pc, #220]	; (80007fc <main+0x118>)
 800071e:	611a      	str	r2, [r3, #16]
	Motor1.backward_pin = GPIO_Pin_12;	// port = GPIOx & pin = GPIO_Pin_x
 8000720:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <main+0x110>)
 8000722:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000726:	829a      	strh	r2, [r3, #20]

	Motor1.forward_port = GPIOA;			// Port and pin assignments for backward direction
 8000728:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <main+0x110>)
 800072a:	4a33      	ldr	r2, [pc, #204]	; (80007f8 <main+0x114>)
 800072c:	609a      	str	r2, [r3, #8]
	Motor1.forward_pin = GPIO_Pin_9;	// port = GPIOx & pin = GPIO_Pin_x
 800072e:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <main+0x110>)
 8000730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000734:	819a      	strh	r2, [r3, #12]

	MotorConfig(Motor1);							// DC Motor configuration including pwm settings
 8000736:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <main+0x110>)
 8000738:	466c      	mov	r4, sp
 800073a:	f103 0210 	add.w	r2, r3, #16
 800073e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000742:	e884 0003 	stmia.w	r4, {r0, r1}
 8000746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000748:	f000 fb36 	bl	8000db8 <MotorConfig>
																		// If pwm not used, Basic_MotorConfig() function have to be used instead of MotorConfig().
	while(1){

		MotorRun(Motor1,100,'b');				// Running function with pwm 	// MotorRun(Motor object, speed(min:0 max:100), direction('f':forward & 'b':backward))
 800074c:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <main+0x110>)
 800074e:	2262      	movs	r2, #98	; 0x62
 8000750:	9203      	str	r2, [sp, #12]
 8000752:	2264      	movs	r2, #100	; 0x64
 8000754:	9202      	str	r2, [sp, #8]
 8000756:	466c      	mov	r4, sp
 8000758:	f103 0210 	add.w	r2, r3, #16
 800075c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000760:	e884 0003 	stmia.w	r4, {r0, r1}
 8000764:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000766:	f000 f8d1 	bl	800090c <MotorRun>
		GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_SET);																// If pwm not used, Basic_MotorRun() function have to be used instead of MotorRun().	// Basic_MotorRun(Motor object, direction('f':forward & 'b':backward))
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000770:	481f      	ldr	r0, [pc, #124]	; (80007f0 <main+0x10c>)
 8000772:	f7ff fddb 	bl	800032c <GPIO_WriteBit>
		Motor_Delay(3000);
 8000776:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800077a:	f000 f8b3 	bl	80008e4 <Motor_Delay>

		Motor_Stop(Motor1);							// Motor_Stop(Motor object)
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <main+0x110>)
 8000780:	466c      	mov	r4, sp
 8000782:	f103 0210 	add.w	r2, r3, #16
 8000786:	e892 0003 	ldmia.w	r2, {r0, r1}
 800078a:	e884 0003 	stmia.w	r4, {r0, r1}
 800078e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000790:	f001 feba 	bl	8002508 <Motor_Stop>
		Motor_Delay(800);								// Motor_Delay(time(millisecond))
 8000794:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000798:	f000 f8a4 	bl	80008e4 <Motor_Delay>

		MotorRun(Motor1,75,'f');
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <main+0x110>)
 800079e:	2266      	movs	r2, #102	; 0x66
 80007a0:	9203      	str	r2, [sp, #12]
 80007a2:	224b      	movs	r2, #75	; 0x4b
 80007a4:	9202      	str	r2, [sp, #8]
 80007a6:	466c      	mov	r4, sp
 80007a8:	f103 0210 	add.w	r2, r3, #16
 80007ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80007b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b6:	f000 f8a9 	bl	800090c <MotorRun>
		GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_RESET);// %75 speed and forward direction for Motor1
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c0:	480b      	ldr	r0, [pc, #44]	; (80007f0 <main+0x10c>)
 80007c2:	f7ff fdb3 	bl	800032c <GPIO_WriteBit>
		Motor_Delay(3000);
 80007c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007ca:	f000 f88b 	bl	80008e4 <Motor_Delay>

		Motor_Stop(Motor1);
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <main+0x110>)
 80007d0:	466c      	mov	r4, sp
 80007d2:	f103 0210 	add.w	r2, r3, #16
 80007d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007da:	e884 0003 	stmia.w	r4, {r0, r1}
 80007de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e0:	f001 fe92 	bl	8002508 <Motor_Stop>
		Motor_Delay(800);
 80007e4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80007e8:	f000 f87c 	bl	80008e4 <Motor_Delay>
		MotorRun(Motor1,100,'b');				// Running function with pwm 	// MotorRun(Motor object, speed(min:0 max:100), direction('f':forward & 'b':backward))
 80007ec:	e7ae      	b.n	800074c <main+0x68>
 80007ee:	bf00      	nop
 80007f0:	40011000 	.word	0x40011000
 80007f4:	20000034 	.word	0x20000034
 80007f8:	40010800 	.word	0x40010800
 80007fc:	40010c00 	.word	0x40010c00

08000800 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	da0b      	bge.n	800082c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000814:	490d      	ldr	r1, [pc, #52]	; (800084c <NVIC_SetPriority+0x4c>)
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f003 030f 	and.w	r3, r3, #15
 800081c:	3b04      	subs	r3, #4
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	440b      	add	r3, r1
 8000828:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800082a:	e009      	b.n	8000840 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800082c:	4908      	ldr	r1, [pc, #32]	; (8000850 <NVIC_SetPriority+0x50>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	440b      	add	r3, r1
 800083c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00
 8000850:	e000e100 	.word	0xe000e100

08000854 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000862:	d301      	bcc.n	8000868 <SysTick_Config+0x14>
 8000864:	2301      	movs	r3, #1
 8000866:	e011      	b.n	800088c <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000868:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <SysTick_Config+0x40>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000870:	3b01      	subs	r3, #1
 8000872:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000874:	210f      	movs	r1, #15
 8000876:	f04f 30ff 	mov.w	r0, #4294967295
 800087a:	f7ff ffc1 	bl	8000800 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SysTick_Config+0x40>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <SysTick_Config+0x40>)
 8000886:	2207      	movs	r2, #7
 8000888:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	e000e010 	.word	0xe000e010

08000898 <systemClockEnable>:
#include "stm32f10x.h"                  // Device header
#include "PWM.h"

uint32_t delay_counter = 0;		// The counter for delay function

void systemClockEnable(void){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

    SystemCoreClockUpdate();
 800089c:	f001 fec8 	bl	8002630 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock/1000);
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <systemClockEnable+0x20>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a05      	ldr	r2, [pc, #20]	; (80008bc <systemClockEnable+0x24>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	099b      	lsrs	r3, r3, #6
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ffd1 	bl	8000854 <SysTick_Config>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000000 	.word	0x20000000
 80008bc:	10624dd3 	.word	0x10624dd3

080008c0 <SysTick_Handler>:

void SysTick_Handler(void){
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
    if(delay_counter>0){
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <SysTick_Handler+0x20>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d004      	beq.n	80008d6 <SysTick_Handler+0x16>
        delay_counter--;
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <SysTick_Handler+0x20>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	4a03      	ldr	r2, [pc, #12]	; (80008e0 <SysTick_Handler+0x20>)
 80008d4:	6013      	str	r3, [r2, #0]
    }
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000030 	.word	0x20000030

080008e4 <Motor_Delay>:

void Motor_Delay(uint32_t time){		// Real time delay function
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

    systemClockEnable();
 80008ec:	f7ff ffd4 	bl	8000898 <systemClockEnable>
    delay_counter=time;
 80008f0:	4a05      	ldr	r2, [pc, #20]	; (8000908 <Motor_Delay+0x24>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
    while(delay_counter);
 80008f6:	bf00      	nop
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <Motor_Delay+0x24>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1fb      	bne.n	80008f8 <Motor_Delay+0x14>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000030 	.word	0x20000030

0800090c <MotorRun>:

void MotorRun(Motor Port_Pin, uint16_t speed, char direction){   // Running function with pwm
 800090c:	b084      	sub	sp, #16
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	f107 0e10 	add.w	lr, r7, #16
 8000918:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

	 uint16_t timPulse = 	24*speed;		// sets the period range between 0 and 100
 800091c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800091e:	461a      	mov	r2, r3
 8000920:	0052      	lsls	r2, r2, #1
 8000922:	4413      	add	r3, r2
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	80fb      	strh	r3, [r7, #6]

if(direction=='f'){				// motor direction
 8000928:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800092c:	2b66      	cmp	r3, #102	; 0x66
 800092e:	d106      	bne.n	800093e <MotorRun+0x32>

	Port_Pin.forward_port->BSRR = Port_Pin.forward_pin;		// high voltage for forward pin
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	8bba      	ldrh	r2, [r7, #28]
 8000934:	611a      	str	r2, [r3, #16]
	Port_Pin.backward_port->BRR = Port_Pin.backward_pin;		// low voltage for backward pin
 8000936:	6a3b      	ldr	r3, [r7, #32]
 8000938:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	e009      	b.n	8000952 <MotorRun+0x46>
}
else if(direction=='b'){	// motor direction
 800093e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000942:	2b62      	cmp	r3, #98	; 0x62
 8000944:	d105      	bne.n	8000952 <MotorRun+0x46>

	Port_Pin.backward_port->BSRR = Port_Pin.backward_pin;	// high voltage for backward pin
 8000946:	6a3b      	ldr	r3, [r7, #32]
 8000948:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800094a:	611a      	str	r2, [r3, #16]
	Port_Pin.forward_port->BRR = Port_Pin.forward_pin;		// low voltage for forward pin
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	8bba      	ldrh	r2, [r7, #28]
 8000950:	615a      	str	r2, [r3, #20]
}

if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_0){		// running with pwm
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	4a93      	ldr	r2, [pc, #588]	; (8000ba4 <MotorRun+0x298>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d11b      	bne.n	8000992 <MotorRun+0x86>
 800095a:	8abb      	ldrh	r3, [r7, #20]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d118      	bne.n	8000992 <MotorRun+0x86>

	TIM2->CCR1 = timPulse;  // CCR = timPulse [Duty Cycle = (CCR/ARR)*100]
 8000960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	8693      	strh	r3, [r2, #52]	; 0x34
	TIM2->EGR |= 0x1; 			// Update generation enable
 8000968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800096c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000970:	8a9b      	ldrh	r3, [r3, #20]
 8000972:	b29b      	uxth	r3, r3
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	b29b      	uxth	r3, r3
 800097a:	8293      	strh	r3, [r2, #20]
	TIM2->CR1 |= 0x1;				// Relevant timer enable
 800097c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	b29b      	uxth	r3, r3
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	b29b      	uxth	r3, r3
 800098e:	8013      	strh	r3, [r2, #0]
 8000990:	e204      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_1){
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4a83      	ldr	r2, [pc, #524]	; (8000ba4 <MotorRun+0x298>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d11b      	bne.n	80009d2 <MotorRun+0xc6>
 800099a:	8abb      	ldrh	r3, [r7, #20]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d118      	bne.n	80009d2 <MotorRun+0xc6>

	TIM2->CCR2= timPulse;
 80009a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	8713      	strh	r3, [r2, #56]	; 0x38
	TIM2->EGR |= 0x1;
 80009a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b0:	8a9b      	ldrh	r3, [r3, #20]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	8293      	strh	r3, [r2, #20]
	TIM2->CR1 |= 0x1;
 80009bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	8013      	strh	r3, [r2, #0]
 80009d0:	e1e4      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_2){
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	4a73      	ldr	r2, [pc, #460]	; (8000ba4 <MotorRun+0x298>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d11b      	bne.n	8000a12 <MotorRun+0x106>
 80009da:	8abb      	ldrh	r3, [r7, #20]
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d118      	bne.n	8000a12 <MotorRun+0x106>

	TIM2->CCR3 = timPulse;
 80009e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	8793      	strh	r3, [r2, #60]	; 0x3c
	TIM2->EGR |= 0x1;
 80009e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f0:	8a9b      	ldrh	r3, [r3, #20]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	8293      	strh	r3, [r2, #20]
	TIM2->CR1 |= 0x1;
 80009fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	8013      	strh	r3, [r2, #0]
 8000a10:	e1c4      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_3){
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	4a63      	ldr	r2, [pc, #396]	; (8000ba4 <MotorRun+0x298>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d11c      	bne.n	8000a54 <MotorRun+0x148>
 8000a1a:	8abb      	ldrh	r3, [r7, #20]
 8000a1c:	2b08      	cmp	r3, #8
 8000a1e:	d119      	bne.n	8000a54 <MotorRun+0x148>

	TIM2->CCR4 = timPulse;
 8000a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a24:	88fb      	ldrh	r3, [r7, #6]
 8000a26:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	TIM2->EGR |= 0x1;
 8000a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a32:	8a9b      	ldrh	r3, [r3, #20]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	8293      	strh	r3, [r2, #20]
	TIM2->CR1 |= 0x1;
 8000a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	8013      	strh	r3, [r2, #0]
 8000a52:	e1a3      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_6){
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	4a53      	ldr	r2, [pc, #332]	; (8000ba4 <MotorRun+0x298>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d116      	bne.n	8000a8a <MotorRun+0x17e>
 8000a5c:	8abb      	ldrh	r3, [r7, #20]
 8000a5e:	2b40      	cmp	r3, #64	; 0x40
 8000a60:	d113      	bne.n	8000a8a <MotorRun+0x17e>

	TIM3->CCR1 = timPulse;
 8000a62:	4a51      	ldr	r2, [pc, #324]	; (8000ba8 <MotorRun+0x29c>)
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	8693      	strh	r3, [r2, #52]	; 0x34
	TIM3->EGR |= 0x1;
 8000a68:	4a4f      	ldr	r2, [pc, #316]	; (8000ba8 <MotorRun+0x29c>)
 8000a6a:	4b4f      	ldr	r3, [pc, #316]	; (8000ba8 <MotorRun+0x29c>)
 8000a6c:	8a9b      	ldrh	r3, [r3, #20]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	8293      	strh	r3, [r2, #20]
	TIM3->CR1 |=0x1;
 8000a78:	4a4b      	ldr	r2, [pc, #300]	; (8000ba8 <MotorRun+0x29c>)
 8000a7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ba8 <MotorRun+0x29c>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	8013      	strh	r3, [r2, #0]
 8000a88:	e188      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_7){
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	4a45      	ldr	r2, [pc, #276]	; (8000ba4 <MotorRun+0x298>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d116      	bne.n	8000ac0 <MotorRun+0x1b4>
 8000a92:	8abb      	ldrh	r3, [r7, #20]
 8000a94:	2b80      	cmp	r3, #128	; 0x80
 8000a96:	d113      	bne.n	8000ac0 <MotorRun+0x1b4>

	TIM3->CCR2 = timPulse;
 8000a98:	4a43      	ldr	r2, [pc, #268]	; (8000ba8 <MotorRun+0x29c>)
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	8713      	strh	r3, [r2, #56]	; 0x38
	TIM3->EGR |= 0x1;
 8000a9e:	4a42      	ldr	r2, [pc, #264]	; (8000ba8 <MotorRun+0x29c>)
 8000aa0:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <MotorRun+0x29c>)
 8000aa2:	8a9b      	ldrh	r3, [r3, #20]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	8293      	strh	r3, [r2, #20]
	TIM3->CR1 |=0x1;
 8000aae:	4a3e      	ldr	r2, [pc, #248]	; (8000ba8 <MotorRun+0x29c>)
 8000ab0:	4b3d      	ldr	r3, [pc, #244]	; (8000ba8 <MotorRun+0x29c>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	8013      	strh	r3, [r2, #0]
 8000abe:	e16d      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_8){
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	4a38      	ldr	r2, [pc, #224]	; (8000ba4 <MotorRun+0x298>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d117      	bne.n	8000af8 <MotorRun+0x1ec>
 8000ac8:	8abb      	ldrh	r3, [r7, #20]
 8000aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ace:	d113      	bne.n	8000af8 <MotorRun+0x1ec>

	TIM1->CCR1 = timPulse;
 8000ad0:	4a36      	ldr	r2, [pc, #216]	; (8000bac <MotorRun+0x2a0>)
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	8693      	strh	r3, [r2, #52]	; 0x34
	TIM1->EGR |= 0x1;
 8000ad6:	4a35      	ldr	r2, [pc, #212]	; (8000bac <MotorRun+0x2a0>)
 8000ad8:	4b34      	ldr	r3, [pc, #208]	; (8000bac <MotorRun+0x2a0>)
 8000ada:	8a9b      	ldrh	r3, [r3, #20]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	8293      	strh	r3, [r2, #20]
	TIM1->CR1 |=0x1;
 8000ae6:	4a31      	ldr	r2, [pc, #196]	; (8000bac <MotorRun+0x2a0>)
 8000ae8:	4b30      	ldr	r3, [pc, #192]	; (8000bac <MotorRun+0x2a0>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	8013      	strh	r3, [r2, #0]
 8000af6:	e151      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_9){
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	4a2a      	ldr	r2, [pc, #168]	; (8000ba4 <MotorRun+0x298>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d117      	bne.n	8000b30 <MotorRun+0x224>
 8000b00:	8abb      	ldrh	r3, [r7, #20]
 8000b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b06:	d113      	bne.n	8000b30 <MotorRun+0x224>

	TIM1->CCR2 = timPulse;
 8000b08:	4a28      	ldr	r2, [pc, #160]	; (8000bac <MotorRun+0x2a0>)
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	8713      	strh	r3, [r2, #56]	; 0x38
	TIM1->EGR |= 0x1;
 8000b0e:	4a27      	ldr	r2, [pc, #156]	; (8000bac <MotorRun+0x2a0>)
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <MotorRun+0x2a0>)
 8000b12:	8a9b      	ldrh	r3, [r3, #20]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	8293      	strh	r3, [r2, #20]
	TIM1->CR1 |=0x1;
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <MotorRun+0x2a0>)
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <MotorRun+0x2a0>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	8013      	strh	r3, [r2, #0]
 8000b2e:	e135      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_10){
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <MotorRun+0x298>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d117      	bne.n	8000b68 <MotorRun+0x25c>
 8000b38:	8abb      	ldrh	r3, [r7, #20]
 8000b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b3e:	d113      	bne.n	8000b68 <MotorRun+0x25c>

	TIM1->CCR3 = timPulse;
 8000b40:	4a1a      	ldr	r2, [pc, #104]	; (8000bac <MotorRun+0x2a0>)
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	8793      	strh	r3, [r2, #60]	; 0x3c
	TIM1->EGR |= 0x1;
 8000b46:	4a19      	ldr	r2, [pc, #100]	; (8000bac <MotorRun+0x2a0>)
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <MotorRun+0x2a0>)
 8000b4a:	8a9b      	ldrh	r3, [r3, #20]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	8293      	strh	r3, [r2, #20]
	TIM1->CR1 |=0x1;
 8000b56:	4a15      	ldr	r2, [pc, #84]	; (8000bac <MotorRun+0x2a0>)
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MotorRun+0x2a0>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	8013      	strh	r3, [r2, #0]
 8000b66:	e119      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_11){
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <MotorRun+0x298>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d11f      	bne.n	8000bb0 <MotorRun+0x2a4>
 8000b70:	8abb      	ldrh	r3, [r7, #20]
 8000b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b76:	d11b      	bne.n	8000bb0 <MotorRun+0x2a4>

	TIM1->CCR4 = timPulse;
 8000b78:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <MotorRun+0x2a0>)
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	TIM1->EGR |= 0x1;
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <MotorRun+0x2a0>)
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MotorRun+0x2a0>)
 8000b84:	8a9b      	ldrh	r3, [r3, #20]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	8293      	strh	r3, [r2, #20]
	TIM1->CR1 |=0x1;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <MotorRun+0x2a0>)
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MotorRun+0x2a0>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	8013      	strh	r3, [r2, #0]
 8000ba0:	e0fc      	b.n	8000d9c <MotorRun+0x490>
 8000ba2:	bf00      	nop
 8000ba4:	40010800 	.word	0x40010800
 8000ba8:	40000400 	.word	0x40000400
 8000bac:	40012c00 	.word	0x40012c00
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_15){
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	4a7e      	ldr	r2, [pc, #504]	; (8000dac <MotorRun+0x4a0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d11c      	bne.n	8000bf2 <MotorRun+0x2e6>
 8000bb8:	8abb      	ldrh	r3, [r7, #20]
 8000bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bbe:	d118      	bne.n	8000bf2 <MotorRun+0x2e6>

	TIM2->CCR1 = timPulse;
 8000bc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	8693      	strh	r3, [r2, #52]	; 0x34
	TIM2->EGR |= 0x1;
 8000bc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd0:	8a9b      	ldrh	r3, [r3, #20]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	8293      	strh	r3, [r2, #20]
	TIM2->CR1 |=0x1;
 8000bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	8013      	strh	r3, [r2, #0]
 8000bf0:	e0d4      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_0){
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4a6e      	ldr	r2, [pc, #440]	; (8000db0 <MotorRun+0x4a4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d116      	bne.n	8000c28 <MotorRun+0x31c>
 8000bfa:	8abb      	ldrh	r3, [r7, #20]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d113      	bne.n	8000c28 <MotorRun+0x31c>

	TIM3->CCR3 = timPulse;
 8000c00:	4a6c      	ldr	r2, [pc, #432]	; (8000db4 <MotorRun+0x4a8>)
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	8793      	strh	r3, [r2, #60]	; 0x3c
	TIM3->EGR |= 0x1;
 8000c06:	4a6b      	ldr	r2, [pc, #428]	; (8000db4 <MotorRun+0x4a8>)
 8000c08:	4b6a      	ldr	r3, [pc, #424]	; (8000db4 <MotorRun+0x4a8>)
 8000c0a:	8a9b      	ldrh	r3, [r3, #20]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	8293      	strh	r3, [r2, #20]
	TIM3->CR1 |=0x1;
 8000c16:	4a67      	ldr	r2, [pc, #412]	; (8000db4 <MotorRun+0x4a8>)
 8000c18:	4b66      	ldr	r3, [pc, #408]	; (8000db4 <MotorRun+0x4a8>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	8013      	strh	r3, [r2, #0]
 8000c26:	e0b9      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_1){
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4a61      	ldr	r2, [pc, #388]	; (8000db0 <MotorRun+0x4a4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d11c      	bne.n	8000c6a <MotorRun+0x35e>
 8000c30:	8abb      	ldrh	r3, [r7, #20]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d119      	bne.n	8000c6a <MotorRun+0x35e>

	TIM2->CCR4 = timPulse;
 8000c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	TIM2->EGR |= 0x1;
 8000c40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c48:	8a9b      	ldrh	r3, [r3, #20]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	8293      	strh	r3, [r2, #20]
	TIM2->CR1 |=0x1;
 8000c54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	8013      	strh	r3, [r2, #0]
 8000c68:	e098      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_3){
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4a50      	ldr	r2, [pc, #320]	; (8000db0 <MotorRun+0x4a4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d11b      	bne.n	8000caa <MotorRun+0x39e>
 8000c72:	8abb      	ldrh	r3, [r7, #20]
 8000c74:	2b08      	cmp	r3, #8
 8000c76:	d118      	bne.n	8000caa <MotorRun+0x39e>

	TIM2->CCR2 = timPulse;
 8000c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	8713      	strh	r3, [r2, #56]	; 0x38
	TIM2->EGR |= 0x1;
 8000c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c88:	8a9b      	ldrh	r3, [r3, #20]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	8293      	strh	r3, [r2, #20]
	TIM2->CR1 |=0x1;
 8000c94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	8013      	strh	r3, [r2, #0]
 8000ca8:	e078      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_4){
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	4a40      	ldr	r2, [pc, #256]	; (8000db0 <MotorRun+0x4a4>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d116      	bne.n	8000ce0 <MotorRun+0x3d4>
 8000cb2:	8abb      	ldrh	r3, [r7, #20]
 8000cb4:	2b10      	cmp	r3, #16
 8000cb6:	d113      	bne.n	8000ce0 <MotorRun+0x3d4>

	TIM3->CCR1 = timPulse;
 8000cb8:	4a3e      	ldr	r2, [pc, #248]	; (8000db4 <MotorRun+0x4a8>)
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	8693      	strh	r3, [r2, #52]	; 0x34
	TIM3->EGR |= 0x1;
 8000cbe:	4a3d      	ldr	r2, [pc, #244]	; (8000db4 <MotorRun+0x4a8>)
 8000cc0:	4b3c      	ldr	r3, [pc, #240]	; (8000db4 <MotorRun+0x4a8>)
 8000cc2:	8a9b      	ldrh	r3, [r3, #20]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	8293      	strh	r3, [r2, #20]
	TIM3->CR1 |=0x1;
 8000cce:	4a39      	ldr	r2, [pc, #228]	; (8000db4 <MotorRun+0x4a8>)
 8000cd0:	4b38      	ldr	r3, [pc, #224]	; (8000db4 <MotorRun+0x4a8>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	8013      	strh	r3, [r2, #0]
 8000cde:	e05d      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_5){
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4a33      	ldr	r2, [pc, #204]	; (8000db0 <MotorRun+0x4a4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d116      	bne.n	8000d16 <MotorRun+0x40a>
 8000ce8:	8abb      	ldrh	r3, [r7, #20]
 8000cea:	2b20      	cmp	r3, #32
 8000cec:	d113      	bne.n	8000d16 <MotorRun+0x40a>

	TIM3->CCR2 = timPulse;
 8000cee:	4a31      	ldr	r2, [pc, #196]	; (8000db4 <MotorRun+0x4a8>)
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	8713      	strh	r3, [r2, #56]	; 0x38
	TIM3->EGR |= 0x1;
 8000cf4:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <MotorRun+0x4a8>)
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <MotorRun+0x4a8>)
 8000cf8:	8a9b      	ldrh	r3, [r3, #20]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	8293      	strh	r3, [r2, #20]
	TIM3->CR1 |=0x1;
 8000d04:	4a2b      	ldr	r2, [pc, #172]	; (8000db4 <MotorRun+0x4a8>)
 8000d06:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <MotorRun+0x4a8>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	8013      	strh	r3, [r2, #0]
 8000d14:	e042      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_10){
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <MotorRun+0x4a4>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d11c      	bne.n	8000d58 <MotorRun+0x44c>
 8000d1e:	8abb      	ldrh	r3, [r7, #20]
 8000d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d24:	d118      	bne.n	8000d58 <MotorRun+0x44c>

	TIM2->CCR3 = timPulse;
 8000d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	8793      	strh	r3, [r2, #60]	; 0x3c
	TIM2->EGR |= 0x1;
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d36:	8a9b      	ldrh	r3, [r3, #20]
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	8293      	strh	r3, [r2, #20]
	TIM2->CR1 |=0x1;
 8000d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	8013      	strh	r3, [r2, #0]
 8000d56:	e021      	b.n	8000d9c <MotorRun+0x490>
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_11){
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4a15      	ldr	r2, [pc, #84]	; (8000db0 <MotorRun+0x4a4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d11d      	bne.n	8000d9c <MotorRun+0x490>
 8000d60:	8abb      	ldrh	r3, [r7, #20]
 8000d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d66:	d119      	bne.n	8000d9c <MotorRun+0x490>

	TIM2->CCR4 = timPulse;
 8000d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	TIM2->EGR |= 0x1;
 8000d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d7a:	8a9b      	ldrh	r3, [r3, #20]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	8293      	strh	r3, [r2, #20]
	TIM2->CR1 |=0x1;
 8000d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	8013      	strh	r3, [r2, #0]
}
}
 8000d9a:	e7ff      	b.n	8000d9c <MotorRun+0x490>
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000da6:	b004      	add	sp, #16
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40010800 	.word	0x40010800
 8000db0:	40010c00 	.word	0x40010c00
 8000db4:	40000400 	.word	0x40000400

08000db8 <MotorConfig>:

void MotorConfig(Motor Port_Pin){		// DC Motor configuration including pwm settings
 8000db8:	b084      	sub	sp, #16
 8000dba:	b490      	push	{r4, r7}
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	f107 0408 	add.w	r4, r7, #8
 8000dc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_0){		// GPIO and timer configurations
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	4a8e      	ldr	r2, [pc, #568]	; (8001004 <MotorConfig+0x24c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d143      	bne.n	8000e56 <MotorConfig+0x9e>
 8000dce:	89bb      	ldrh	r3, [r7, #12]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d140      	bne.n	8000e56 <MotorConfig+0x9e>

	RCC->APB1ENR |= 0x1;		  // Timer settings
 8000dd4:	4a8c      	ldr	r2, [pc, #560]	; (8001008 <MotorConfig+0x250>)
 8000dd6:	4b8c      	ldr	r3, [pc, #560]	; (8001008 <MotorConfig+0x250>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= 0x5; 			// GPIO settings
 8000de0:	4a89      	ldr	r2, [pc, #548]	; (8001008 <MotorConfig+0x250>)
 8000de2:	4b89      	ldr	r3, [pc, #548]	; (8001008 <MotorConfig+0x250>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f043 0305 	orr.w	r3, r3, #5
 8000dea:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFFFFFF0; // Relevant bits have set to 0
 8000dec:	4a85      	ldr	r2, [pc, #532]	; (8001004 <MotorConfig+0x24c>)
 8000dee:	4b85      	ldr	r3, [pc, #532]	; (8001004 <MotorConfig+0x24c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f023 030f 	bic.w	r3, r3, #15
 8000df6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0xB;				// Output mode and speed settings
 8000df8:	4a82      	ldr	r2, [pc, #520]	; (8001004 <MotorConfig+0x24c>)
 8000dfa:	4b82      	ldr	r3, [pc, #520]	; (8001004 <MotorConfig+0x24c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f043 030b 	orr.w	r3, r3, #11
 8000e02:	6013      	str	r3, [r2, #0]
	TIM2->CCER |= 0x1;				// Capture/ compare output configuration
 8000e04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0c:	8c1b      	ldrh	r3, [r3, #32]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	8413      	strh	r3, [r2, #32]
	TIM2->CR1 |= 0x80;				// Auto preload enable
 8000e18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	8013      	strh	r3, [r2, #0]
	TIM2->CCMR1 |= 0x68;			// Output compare and pwm mode configurations
 8000e2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e34:	8b1b      	ldrh	r3, [r3, #24]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	8313      	strh	r3, [r2, #24]
	TIM2->ARR = 2399; 				// Period = 2400
 8000e40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e44:	f640 125f 	movw	r2, #2399	; 0x95f
 8000e48:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM2->PSC = 10;						// Prescaler = 10
 8000e4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e4e:	220a      	movs	r2, #10
 8000e50:	851a      	strh	r2, [r3, #40]	; 0x28
 8000e52:	f000 bc8e 	b.w	8001772 <MotorConfig+0x9ba>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_1){
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	4a6a      	ldr	r2, [pc, #424]	; (8001004 <MotorConfig+0x24c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d143      	bne.n	8000ee6 <MotorConfig+0x12e>
 8000e5e:	89bb      	ldrh	r3, [r7, #12]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d140      	bne.n	8000ee6 <MotorConfig+0x12e>

	RCC->APB1ENR |= 0x1;
 8000e64:	4a68      	ldr	r2, [pc, #416]	; (8001008 <MotorConfig+0x250>)
 8000e66:	4b68      	ldr	r3, [pc, #416]	; (8001008 <MotorConfig+0x250>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= 0x5; //GPIOA Enable. (If you use pwm, you should also enable alternate function mode. It has done in here.)
 8000e70:	4a65      	ldr	r2, [pc, #404]	; (8001008 <MotorConfig+0x250>)
 8000e72:	4b65      	ldr	r3, [pc, #404]	; (8001008 <MotorConfig+0x250>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	f043 0305 	orr.w	r3, r3, #5
 8000e7a:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFFFFF0F;
 8000e7c:	4a61      	ldr	r2, [pc, #388]	; (8001004 <MotorConfig+0x24c>)
 8000e7e:	4b61      	ldr	r3, [pc, #388]	; (8001004 <MotorConfig+0x24c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e86:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0xB<<4);
 8000e88:	4a5e      	ldr	r2, [pc, #376]	; (8001004 <MotorConfig+0x24c>)
 8000e8a:	4b5e      	ldr	r3, [pc, #376]	; (8001004 <MotorConfig+0x24c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000e92:	6013      	str	r3, [r2, #0]
	TIM2->CCER |= 0x10;
 8000e94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e9c:	8c1b      	ldrh	r3, [r3, #32]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	f043 0310 	orr.w	r3, r3, #16
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	8413      	strh	r3, [r2, #32]
	TIM2->CR1 |= 0x80;
 8000ea8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	8013      	strh	r3, [r2, #0]
	TIM2->CCMR1 |= 0x6800;
 8000ebc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec4:	8b1b      	ldrh	r3, [r3, #24]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	8313      	strh	r3, [r2, #24]
	TIM2->ARR = 2399;
 8000ed0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed4:	f640 125f 	movw	r2, #2399	; 0x95f
 8000ed8:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM2->PSC = 10;
 8000eda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ede:	220a      	movs	r2, #10
 8000ee0:	851a      	strh	r2, [r3, #40]	; 0x28
 8000ee2:	f000 bc46 	b.w	8001772 <MotorConfig+0x9ba>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_2){
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	4a46      	ldr	r2, [pc, #280]	; (8001004 <MotorConfig+0x24c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d142      	bne.n	8000f74 <MotorConfig+0x1bc>
 8000eee:	89bb      	ldrh	r3, [r7, #12]
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d13f      	bne.n	8000f74 <MotorConfig+0x1bc>

	RCC->APB1ENR |= 0x1;
 8000ef4:	4a44      	ldr	r2, [pc, #272]	; (8001008 <MotorConfig+0x250>)
 8000ef6:	4b44      	ldr	r3, [pc, #272]	; (8001008 <MotorConfig+0x250>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= 0x5; //GPIOA Enable. (If you use pwm, you should also enable alternate function mode. It has done in here.)
 8000f00:	4a41      	ldr	r2, [pc, #260]	; (8001008 <MotorConfig+0x250>)
 8000f02:	4b41      	ldr	r3, [pc, #260]	; (8001008 <MotorConfig+0x250>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f043 0305 	orr.w	r3, r3, #5
 8000f0a:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFFFF0FF;
 8000f0c:	4a3d      	ldr	r2, [pc, #244]	; (8001004 <MotorConfig+0x24c>)
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <MotorConfig+0x24c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f16:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0xB<<8);
 8000f18:	4a3a      	ldr	r2, [pc, #232]	; (8001004 <MotorConfig+0x24c>)
 8000f1a:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <MotorConfig+0x24c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 8000f22:	6013      	str	r3, [r2, #0]
	TIM2->CCER |= 0x100;
 8000f24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f2c:	8c1b      	ldrh	r3, [r3, #32]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	8413      	strh	r3, [r2, #32]
	TIM2->CR1 |= 0x80;
 8000f38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	8013      	strh	r3, [r2, #0]
	TIM2->CCMR2 |= 0x68;
 8000f4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f54:	8b9b      	ldrh	r3, [r3, #28]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	8393      	strh	r3, [r2, #28]
	TIM2->ARR = 2399;
 8000f60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f64:	f640 125f 	movw	r2, #2399	; 0x95f
 8000f68:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM2->PSC = 10;
 8000f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6e:	220a      	movs	r2, #10
 8000f70:	851a      	strh	r2, [r3, #40]	; 0x28
 8000f72:	e3fe      	b.n	8001772 <MotorConfig+0x9ba>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_3){
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4a23      	ldr	r2, [pc, #140]	; (8001004 <MotorConfig+0x24c>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d147      	bne.n	800100c <MotorConfig+0x254>
 8000f7c:	89bb      	ldrh	r3, [r7, #12]
 8000f7e:	2b08      	cmp	r3, #8
 8000f80:	d144      	bne.n	800100c <MotorConfig+0x254>

	RCC->APB1ENR |= 0x1;
 8000f82:	4a21      	ldr	r2, [pc, #132]	; (8001008 <MotorConfig+0x250>)
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <MotorConfig+0x250>)
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= 0x5; //GPIOA Enable. (If you use pwm, you should also enable alternate function mode. It has done in here.)
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <MotorConfig+0x250>)
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MotorConfig+0x250>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f043 0305 	orr.w	r3, r3, #5
 8000f98:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFFF0FFF;
 8000f9a:	4a1a      	ldr	r2, [pc, #104]	; (8001004 <MotorConfig+0x24c>)
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MotorConfig+0x24c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000fa4:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0xB<<12);
 8000fa6:	4a17      	ldr	r2, [pc, #92]	; (8001004 <MotorConfig+0x24c>)
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MotorConfig+0x24c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 8000fb0:	6013      	str	r3, [r2, #0]
	TIM2->CCER |= 0x1000;
 8000fb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fba:	8c1b      	ldrh	r3, [r3, #32]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	8413      	strh	r3, [r2, #32]
	TIM2->CR1 |= 0x80;
 8000fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	8013      	strh	r3, [r2, #0]
	TIM2->CCMR2 |= 0x6800;
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe2:	8b9b      	ldrh	r3, [r3, #28]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	8393      	strh	r3, [r2, #28]
	TIM2->ARR = 2399;
 8000fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff2:	f640 125f 	movw	r2, #2399	; 0x95f
 8000ff6:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM2->PSC = 10;
 8000ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ffc:	220a      	movs	r2, #10
 8000ffe:	851a      	strh	r2, [r3, #40]	; 0x28
 8001000:	e3b7      	b.n	8001772 <MotorConfig+0x9ba>
 8001002:	bf00      	nop
 8001004:	40010800 	.word	0x40010800
 8001008:	40021000 	.word	0x40021000
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_6){
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4a7e      	ldr	r2, [pc, #504]	; (8001208 <MotorConfig+0x450>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d13a      	bne.n	800108a <MotorConfig+0x2d2>
 8001014:	89bb      	ldrh	r3, [r7, #12]
 8001016:	2b40      	cmp	r3, #64	; 0x40
 8001018:	d137      	bne.n	800108a <MotorConfig+0x2d2>

	RCC->APB1ENR |= (0x1<<1);
 800101a:	4a7c      	ldr	r2, [pc, #496]	; (800120c <MotorConfig+0x454>)
 800101c:	4b7b      	ldr	r3, [pc, #492]	; (800120c <MotorConfig+0x454>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= 0x5; //GPIOA Enable. (If you use pwm, you should also enable alternate function mode. It has done in here.)
 8001026:	4a79      	ldr	r2, [pc, #484]	; (800120c <MotorConfig+0x454>)
 8001028:	4b78      	ldr	r3, [pc, #480]	; (800120c <MotorConfig+0x454>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f043 0305 	orr.w	r3, r3, #5
 8001030:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xF0FFFFFF;
 8001032:	4a75      	ldr	r2, [pc, #468]	; (8001208 <MotorConfig+0x450>)
 8001034:	4b74      	ldr	r3, [pc, #464]	; (8001208 <MotorConfig+0x450>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800103c:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0xB<<24);
 800103e:	4a72      	ldr	r2, [pc, #456]	; (8001208 <MotorConfig+0x450>)
 8001040:	4b71      	ldr	r3, [pc, #452]	; (8001208 <MotorConfig+0x450>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 8001048:	6013      	str	r3, [r2, #0]
	TIM3->CCER |= 0x1;
 800104a:	4a71      	ldr	r2, [pc, #452]	; (8001210 <MotorConfig+0x458>)
 800104c:	4b70      	ldr	r3, [pc, #448]	; (8001210 <MotorConfig+0x458>)
 800104e:	8c1b      	ldrh	r3, [r3, #32]
 8001050:	b29b      	uxth	r3, r3
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	b29b      	uxth	r3, r3
 8001058:	8413      	strh	r3, [r2, #32]
	TIM3->CR1 |= 0x80;
 800105a:	4a6d      	ldr	r2, [pc, #436]	; (8001210 <MotorConfig+0x458>)
 800105c:	4b6c      	ldr	r3, [pc, #432]	; (8001210 <MotorConfig+0x458>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	b29b      	uxth	r3, r3
 8001062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001066:	b29b      	uxth	r3, r3
 8001068:	8013      	strh	r3, [r2, #0]
	TIM3->CCMR1 |= 0x68;
 800106a:	4a69      	ldr	r2, [pc, #420]	; (8001210 <MotorConfig+0x458>)
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <MotorConfig+0x458>)
 800106e:	8b1b      	ldrh	r3, [r3, #24]
 8001070:	b29b      	uxth	r3, r3
 8001072:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8001076:	b29b      	uxth	r3, r3
 8001078:	8313      	strh	r3, [r2, #24]
	TIM3->ARR = 2399;
 800107a:	4b65      	ldr	r3, [pc, #404]	; (8001210 <MotorConfig+0x458>)
 800107c:	f640 125f 	movw	r2, #2399	; 0x95f
 8001080:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM3->PSC= 10;
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <MotorConfig+0x458>)
 8001084:	220a      	movs	r2, #10
 8001086:	851a      	strh	r2, [r3, #40]	; 0x28
 8001088:	e373      	b.n	8001772 <MotorConfig+0x9ba>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_7){
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	4a5e      	ldr	r2, [pc, #376]	; (8001208 <MotorConfig+0x450>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d13a      	bne.n	8001108 <MotorConfig+0x350>
 8001092:	89bb      	ldrh	r3, [r7, #12]
 8001094:	2b80      	cmp	r3, #128	; 0x80
 8001096:	d137      	bne.n	8001108 <MotorConfig+0x350>

	RCC->APB1ENR |= (0x1<<1);
 8001098:	4a5c      	ldr	r2, [pc, #368]	; (800120c <MotorConfig+0x454>)
 800109a:	4b5c      	ldr	r3, [pc, #368]	; (800120c <MotorConfig+0x454>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= 0x5; //GPIOA Enable. (If you use pwm, you should also enable alternate function mode. It has done in here.)
 80010a4:	4a59      	ldr	r2, [pc, #356]	; (800120c <MotorConfig+0x454>)
 80010a6:	4b59      	ldr	r3, [pc, #356]	; (800120c <MotorConfig+0x454>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f043 0305 	orr.w	r3, r3, #5
 80010ae:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0x0FFFFFFF;
 80010b0:	4a55      	ldr	r2, [pc, #340]	; (8001208 <MotorConfig+0x450>)
 80010b2:	4b55      	ldr	r3, [pc, #340]	; (8001208 <MotorConfig+0x450>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80010ba:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0xB<<28);
 80010bc:	4a52      	ldr	r2, [pc, #328]	; (8001208 <MotorConfig+0x450>)
 80010be:	4b52      	ldr	r3, [pc, #328]	; (8001208 <MotorConfig+0x450>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 80010c6:	6013      	str	r3, [r2, #0]
	TIM3->CCER |= 0x10;
 80010c8:	4a51      	ldr	r2, [pc, #324]	; (8001210 <MotorConfig+0x458>)
 80010ca:	4b51      	ldr	r3, [pc, #324]	; (8001210 <MotorConfig+0x458>)
 80010cc:	8c1b      	ldrh	r3, [r3, #32]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f043 0310 	orr.w	r3, r3, #16
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	8413      	strh	r3, [r2, #32]
	TIM3->CR1 |= 0x80;
 80010d8:	4a4d      	ldr	r2, [pc, #308]	; (8001210 <MotorConfig+0x458>)
 80010da:	4b4d      	ldr	r3, [pc, #308]	; (8001210 <MotorConfig+0x458>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	8013      	strh	r3, [r2, #0]
	TIM3->CCMR1 |= 0x6800;
 80010e8:	4a49      	ldr	r2, [pc, #292]	; (8001210 <MotorConfig+0x458>)
 80010ea:	4b49      	ldr	r3, [pc, #292]	; (8001210 <MotorConfig+0x458>)
 80010ec:	8b1b      	ldrh	r3, [r3, #24]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	8313      	strh	r3, [r2, #24]
	TIM3->ARR = 2399;
 80010f8:	4b45      	ldr	r3, [pc, #276]	; (8001210 <MotorConfig+0x458>)
 80010fa:	f640 125f 	movw	r2, #2399	; 0x95f
 80010fe:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM3->PSC = 10;
 8001100:	4b43      	ldr	r3, [pc, #268]	; (8001210 <MotorConfig+0x458>)
 8001102:	220a      	movs	r2, #10
 8001104:	851a      	strh	r2, [r3, #40]	; 0x28
 8001106:	e334      	b.n	8001772 <MotorConfig+0x9ba>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_8){
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4a3f      	ldr	r2, [pc, #252]	; (8001208 <MotorConfig+0x450>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d13b      	bne.n	8001188 <MotorConfig+0x3d0>
 8001110:	89bb      	ldrh	r3, [r7, #12]
 8001112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001116:	d137      	bne.n	8001188 <MotorConfig+0x3d0>

	RCC->APB2ENR |= (0x1<<11);
 8001118:	4a3c      	ldr	r2, [pc, #240]	; (800120c <MotorConfig+0x454>)
 800111a:	4b3c      	ldr	r3, [pc, #240]	; (800120c <MotorConfig+0x454>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001122:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= 0x5; //GPIOA Enable. (If you use pwm, you should also enable alternate function mode. It has done in here.)
 8001124:	4a39      	ldr	r2, [pc, #228]	; (800120c <MotorConfig+0x454>)
 8001126:	4b39      	ldr	r3, [pc, #228]	; (800120c <MotorConfig+0x454>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f043 0305 	orr.w	r3, r3, #5
 800112e:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFFFFF0;
 8001130:	4a35      	ldr	r2, [pc, #212]	; (8001208 <MotorConfig+0x450>)
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <MotorConfig+0x450>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f023 030f 	bic.w	r3, r3, #15
 800113a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0xB;
 800113c:	4a32      	ldr	r2, [pc, #200]	; (8001208 <MotorConfig+0x450>)
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <MotorConfig+0x450>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f043 030b 	orr.w	r3, r3, #11
 8001146:	6053      	str	r3, [r2, #4]
	TIM1->CCER |= 0x1;
 8001148:	4a32      	ldr	r2, [pc, #200]	; (8001214 <MotorConfig+0x45c>)
 800114a:	4b32      	ldr	r3, [pc, #200]	; (8001214 <MotorConfig+0x45c>)
 800114c:	8c1b      	ldrh	r3, [r3, #32]
 800114e:	b29b      	uxth	r3, r3
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	b29b      	uxth	r3, r3
 8001156:	8413      	strh	r3, [r2, #32]
	TIM1->CR1 |= 0x80;
 8001158:	4a2e      	ldr	r2, [pc, #184]	; (8001214 <MotorConfig+0x45c>)
 800115a:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <MotorConfig+0x45c>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001164:	b29b      	uxth	r3, r3
 8001166:	8013      	strh	r3, [r2, #0]
	TIM1->CCMR1 |= 0x68;
 8001168:	4a2a      	ldr	r2, [pc, #168]	; (8001214 <MotorConfig+0x45c>)
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MotorConfig+0x45c>)
 800116c:	8b1b      	ldrh	r3, [r3, #24]
 800116e:	b29b      	uxth	r3, r3
 8001170:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8001174:	b29b      	uxth	r3, r3
 8001176:	8313      	strh	r3, [r2, #24]
	TIM1->ARR = 2399;
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MotorConfig+0x45c>)
 800117a:	f640 125f 	movw	r2, #2399	; 0x95f
 800117e:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM1->PSC = 10;
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <MotorConfig+0x45c>)
 8001182:	220a      	movs	r2, #10
 8001184:	851a      	strh	r2, [r3, #40]	; 0x28
 8001186:	e2f4      	b.n	8001772 <MotorConfig+0x9ba>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_9){
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <MotorConfig+0x450>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d143      	bne.n	8001218 <MotorConfig+0x460>
 8001190:	89bb      	ldrh	r3, [r7, #12]
 8001192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001196:	d13f      	bne.n	8001218 <MotorConfig+0x460>

	RCC->APB2ENR |= (0x1<<11);
 8001198:	4a1c      	ldr	r2, [pc, #112]	; (800120c <MotorConfig+0x454>)
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <MotorConfig+0x454>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011a2:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= 0x5; //GPIOA Enable. (If you use pwm, you should also enable alternate function mode. It has done in here.)
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <MotorConfig+0x454>)
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <MotorConfig+0x454>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f043 0305 	orr.w	r3, r3, #5
 80011ae:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFFFF0F;
 80011b0:	4a15      	ldr	r2, [pc, #84]	; (8001208 <MotorConfig+0x450>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MotorConfig+0x450>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011ba:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0xB<<4);
 80011bc:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MotorConfig+0x450>)
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MotorConfig+0x450>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80011c6:	6053      	str	r3, [r2, #4]
	TIM1->CCER |= 0x10;
 80011c8:	4a12      	ldr	r2, [pc, #72]	; (8001214 <MotorConfig+0x45c>)
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MotorConfig+0x45c>)
 80011cc:	8c1b      	ldrh	r3, [r3, #32]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	f043 0310 	orr.w	r3, r3, #16
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	8413      	strh	r3, [r2, #32]
	TIM1->CR1 |= 0x80;
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <MotorConfig+0x45c>)
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MotorConfig+0x45c>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	8013      	strh	r3, [r2, #0]
	TIM1->CCMR1 |= 0x6800;
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <MotorConfig+0x45c>)
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MotorConfig+0x45c>)
 80011ec:	8b1b      	ldrh	r3, [r3, #24]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	8313      	strh	r3, [r2, #24]
	TIM1->ARR = 2399;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MotorConfig+0x45c>)
 80011fa:	f640 125f 	movw	r2, #2399	; 0x95f
 80011fe:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM1->PSC = 10;
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <MotorConfig+0x45c>)
 8001202:	220a      	movs	r2, #10
 8001204:	851a      	strh	r2, [r3, #40]	; 0x28
 8001206:	e2b4      	b.n	8001772 <MotorConfig+0x9ba>
 8001208:	40010800 	.word	0x40010800
 800120c:	40021000 	.word	0x40021000
 8001210:	40000400 	.word	0x40000400
 8001214:	40012c00 	.word	0x40012c00
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_10){
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4a83      	ldr	r2, [pc, #524]	; (8001428 <MotorConfig+0x670>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d13b      	bne.n	8001298 <MotorConfig+0x4e0>
 8001220:	89bb      	ldrh	r3, [r7, #12]
 8001222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001226:	d137      	bne.n	8001298 <MotorConfig+0x4e0>

	RCC->APB2ENR |= (0x1<<11);
 8001228:	4a80      	ldr	r2, [pc, #512]	; (800142c <MotorConfig+0x674>)
 800122a:	4b80      	ldr	r3, [pc, #512]	; (800142c <MotorConfig+0x674>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001232:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= 0x5; //GPIOA Enable. (If you use pwm, you should also enable alternate function mode. It has done in here.)
 8001234:	4a7d      	ldr	r2, [pc, #500]	; (800142c <MotorConfig+0x674>)
 8001236:	4b7d      	ldr	r3, [pc, #500]	; (800142c <MotorConfig+0x674>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f043 0305 	orr.w	r3, r3, #5
 800123e:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFFF0FF;
 8001240:	4a79      	ldr	r2, [pc, #484]	; (8001428 <MotorConfig+0x670>)
 8001242:	4b79      	ldr	r3, [pc, #484]	; (8001428 <MotorConfig+0x670>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800124a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0xB<<8);
 800124c:	4a76      	ldr	r2, [pc, #472]	; (8001428 <MotorConfig+0x670>)
 800124e:	4b76      	ldr	r3, [pc, #472]	; (8001428 <MotorConfig+0x670>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 8001256:	6053      	str	r3, [r2, #4]
	TIM1->CCER |= 0x100;
 8001258:	4a75      	ldr	r2, [pc, #468]	; (8001430 <MotorConfig+0x678>)
 800125a:	4b75      	ldr	r3, [pc, #468]	; (8001430 <MotorConfig+0x678>)
 800125c:	8c1b      	ldrh	r3, [r3, #32]
 800125e:	b29b      	uxth	r3, r3
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	b29b      	uxth	r3, r3
 8001266:	8413      	strh	r3, [r2, #32]
	TIM1->CR1 |= 0x80;
 8001268:	4a71      	ldr	r2, [pc, #452]	; (8001430 <MotorConfig+0x678>)
 800126a:	4b71      	ldr	r3, [pc, #452]	; (8001430 <MotorConfig+0x678>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001274:	b29b      	uxth	r3, r3
 8001276:	8013      	strh	r3, [r2, #0]
	TIM1->CCMR2 |= 0x68;
 8001278:	4a6d      	ldr	r2, [pc, #436]	; (8001430 <MotorConfig+0x678>)
 800127a:	4b6d      	ldr	r3, [pc, #436]	; (8001430 <MotorConfig+0x678>)
 800127c:	8b9b      	ldrh	r3, [r3, #28]
 800127e:	b29b      	uxth	r3, r3
 8001280:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8001284:	b29b      	uxth	r3, r3
 8001286:	8393      	strh	r3, [r2, #28]
	TIM1->ARR = 2399;
 8001288:	4b69      	ldr	r3, [pc, #420]	; (8001430 <MotorConfig+0x678>)
 800128a:	f640 125f 	movw	r2, #2399	; 0x95f
 800128e:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM1->PSC = 10;
 8001290:	4b67      	ldr	r3, [pc, #412]	; (8001430 <MotorConfig+0x678>)
 8001292:	220a      	movs	r2, #10
 8001294:	851a      	strh	r2, [r3, #40]	; 0x28
 8001296:	e26c      	b.n	8001772 <MotorConfig+0x9ba>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_11){
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4a63      	ldr	r2, [pc, #396]	; (8001428 <MotorConfig+0x670>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d13b      	bne.n	8001318 <MotorConfig+0x560>
 80012a0:	89bb      	ldrh	r3, [r7, #12]
 80012a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012a6:	d137      	bne.n	8001318 <MotorConfig+0x560>

	RCC->APB2ENR |= (0x1<<11);
 80012a8:	4a60      	ldr	r2, [pc, #384]	; (800142c <MotorConfig+0x674>)
 80012aa:	4b60      	ldr	r3, [pc, #384]	; (800142c <MotorConfig+0x674>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012b2:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= 0x5;
 80012b4:	4a5d      	ldr	r2, [pc, #372]	; (800142c <MotorConfig+0x674>)
 80012b6:	4b5d      	ldr	r3, [pc, #372]	; (800142c <MotorConfig+0x674>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f043 0305 	orr.w	r3, r3, #5
 80012be:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFF0FFF;
 80012c0:	4a59      	ldr	r2, [pc, #356]	; (8001428 <MotorConfig+0x670>)
 80012c2:	4b59      	ldr	r3, [pc, #356]	; (8001428 <MotorConfig+0x670>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80012ca:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0xB<<12);
 80012cc:	4a56      	ldr	r2, [pc, #344]	; (8001428 <MotorConfig+0x670>)
 80012ce:	4b56      	ldr	r3, [pc, #344]	; (8001428 <MotorConfig+0x670>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 80012d6:	6053      	str	r3, [r2, #4]
	TIM1->CCER |= 0x1000;
 80012d8:	4a55      	ldr	r2, [pc, #340]	; (8001430 <MotorConfig+0x678>)
 80012da:	4b55      	ldr	r3, [pc, #340]	; (8001430 <MotorConfig+0x678>)
 80012dc:	8c1b      	ldrh	r3, [r3, #32]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	8413      	strh	r3, [r2, #32]
	TIM1->CR1 |= 0x80;
 80012e8:	4a51      	ldr	r2, [pc, #324]	; (8001430 <MotorConfig+0x678>)
 80012ea:	4b51      	ldr	r3, [pc, #324]	; (8001430 <MotorConfig+0x678>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	8013      	strh	r3, [r2, #0]
	TIM1->CCMR2 |= 0x6800;
 80012f8:	4a4d      	ldr	r2, [pc, #308]	; (8001430 <MotorConfig+0x678>)
 80012fa:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <MotorConfig+0x678>)
 80012fc:	8b9b      	ldrh	r3, [r3, #28]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8001304:	b29b      	uxth	r3, r3
 8001306:	8393      	strh	r3, [r2, #28]
	TIM1->ARR = 2399;
 8001308:	4b49      	ldr	r3, [pc, #292]	; (8001430 <MotorConfig+0x678>)
 800130a:	f640 125f 	movw	r2, #2399	; 0x95f
 800130e:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM1->PSC = 10;
 8001310:	4b47      	ldr	r3, [pc, #284]	; (8001430 <MotorConfig+0x678>)
 8001312:	220a      	movs	r2, #10
 8001314:	851a      	strh	r2, [r3, #40]	; 0x28
 8001316:	e22c      	b.n	8001772 <MotorConfig+0x9ba>
}
else if (Port_Pin.pwm_port == GPIOA && Port_Pin.pwm_pin == GPIO_Pin_15){
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4a43      	ldr	r2, [pc, #268]	; (8001428 <MotorConfig+0x670>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d143      	bne.n	80013a8 <MotorConfig+0x5f0>
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001326:	d13f      	bne.n	80013a8 <MotorConfig+0x5f0>

	RCC->APB2ENR |= 0x5;
 8001328:	4a40      	ldr	r2, [pc, #256]	; (800142c <MotorConfig+0x674>)
 800132a:	4b40      	ldr	r3, [pc, #256]	; (800142c <MotorConfig+0x674>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f043 0305 	orr.w	r3, r3, #5
 8001332:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= 0x1;
 8001334:	4a3d      	ldr	r2, [pc, #244]	; (800142c <MotorConfig+0x674>)
 8001336:	4b3d      	ldr	r3, [pc, #244]	; (800142c <MotorConfig+0x674>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	61d3      	str	r3, [r2, #28]
	GPIOA->CRH &= 0x0FFFFFFF;
 8001340:	4a39      	ldr	r2, [pc, #228]	; (8001428 <MotorConfig+0x670>)
 8001342:	4b39      	ldr	r3, [pc, #228]	; (8001428 <MotorConfig+0x670>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800134a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0xB<<28);
 800134c:	4a36      	ldr	r2, [pc, #216]	; (8001428 <MotorConfig+0x670>)
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <MotorConfig+0x670>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8001356:	6053      	str	r3, [r2, #4]
	TIM2->CCER |= 0x1;
 8001358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001360:	8c1b      	ldrh	r3, [r3, #32]
 8001362:	b29b      	uxth	r3, r3
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	b29b      	uxth	r3, r3
 800136a:	8413      	strh	r3, [r2, #32]
	TIM2->CR1 |= 0x80;
 800136c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001370:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800137c:	b29b      	uxth	r3, r3
 800137e:	8013      	strh	r3, [r2, #0]
	TIM2->CCMR1 |= 0x68;
 8001380:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001388:	8b1b      	ldrh	r3, [r3, #24]
 800138a:	b29b      	uxth	r3, r3
 800138c:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8001390:	b29b      	uxth	r3, r3
 8001392:	8313      	strh	r3, [r2, #24]
	TIM2->ARR = 2399;
 8001394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001398:	f640 125f 	movw	r2, #2399	; 0x95f
 800139c:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM2->PSC = 10;
 800139e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a2:	220a      	movs	r2, #10
 80013a4:	851a      	strh	r2, [r3, #40]	; 0x28
 80013a6:	e1e4      	b.n	8001772 <MotorConfig+0x9ba>
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_0){
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4a22      	ldr	r2, [pc, #136]	; (8001434 <MotorConfig+0x67c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d145      	bne.n	800143c <MotorConfig+0x684>
 80013b0:	89bb      	ldrh	r3, [r7, #12]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d142      	bne.n	800143c <MotorConfig+0x684>

	RCC->APB1ENR |= (0x1<<1);
 80013b6:	4a1d      	ldr	r2, [pc, #116]	; (800142c <MotorConfig+0x674>)
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MotorConfig+0x674>)
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= 0x9;
 80013c2:	4a1a      	ldr	r2, [pc, #104]	; (800142c <MotorConfig+0x674>)
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <MotorConfig+0x674>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f043 0309 	orr.w	r3, r3, #9
 80013cc:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFFFFFF0;
 80013ce:	4a19      	ldr	r2, [pc, #100]	; (8001434 <MotorConfig+0x67c>)
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MotorConfig+0x67c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 030f 	bic.w	r3, r3, #15
 80013d8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0xB;
 80013da:	4a16      	ldr	r2, [pc, #88]	; (8001434 <MotorConfig+0x67c>)
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MotorConfig+0x67c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f043 030b 	orr.w	r3, r3, #11
 80013e4:	6013      	str	r3, [r2, #0]
	TIM3->CCER |= 0x100;
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <MotorConfig+0x680>)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <MotorConfig+0x680>)
 80013ea:	8c1b      	ldrh	r3, [r3, #32]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	8413      	strh	r3, [r2, #32]
	TIM3->CR1 |= 0x80;
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <MotorConfig+0x680>)
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MotorConfig+0x680>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001402:	b29b      	uxth	r3, r3
 8001404:	8013      	strh	r3, [r2, #0]
	TIM3->CCMR2 |= 0x68;
 8001406:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <MotorConfig+0x680>)
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <MotorConfig+0x680>)
 800140a:	8b9b      	ldrh	r3, [r3, #28]
 800140c:	b29b      	uxth	r3, r3
 800140e:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8001412:	b29b      	uxth	r3, r3
 8001414:	8393      	strh	r3, [r2, #28]
	TIM3->ARR = 2399;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MotorConfig+0x680>)
 8001418:	f640 125f 	movw	r2, #2399	; 0x95f
 800141c:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM3->PSC = 10;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MotorConfig+0x680>)
 8001420:	220a      	movs	r2, #10
 8001422:	851a      	strh	r2, [r3, #40]	; 0x28
 8001424:	e1a5      	b.n	8001772 <MotorConfig+0x9ba>
 8001426:	bf00      	nop
 8001428:	40010800 	.word	0x40010800
 800142c:	40021000 	.word	0x40021000
 8001430:	40012c00 	.word	0x40012c00
 8001434:	40010c00 	.word	0x40010c00
 8001438:	40000400 	.word	0x40000400
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_1){
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4a82      	ldr	r2, [pc, #520]	; (8001648 <MotorConfig+0x890>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d13c      	bne.n	80014be <MotorConfig+0x706>
 8001444:	89bb      	ldrh	r3, [r7, #12]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d139      	bne.n	80014be <MotorConfig+0x706>

	RCC->APB1ENR |= (0x1<<1);
 800144a:	4a80      	ldr	r2, [pc, #512]	; (800164c <MotorConfig+0x894>)
 800144c:	4b7f      	ldr	r3, [pc, #508]	; (800164c <MotorConfig+0x894>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= 0x9;
 8001456:	4a7d      	ldr	r2, [pc, #500]	; (800164c <MotorConfig+0x894>)
 8001458:	4b7c      	ldr	r3, [pc, #496]	; (800164c <MotorConfig+0x894>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f043 0309 	orr.w	r3, r3, #9
 8001460:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFFFFF0F;
 8001462:	4a79      	ldr	r2, [pc, #484]	; (8001648 <MotorConfig+0x890>)
 8001464:	4b78      	ldr	r3, [pc, #480]	; (8001648 <MotorConfig+0x890>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800146c:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0xB<<4);
 800146e:	4a76      	ldr	r2, [pc, #472]	; (8001648 <MotorConfig+0x890>)
 8001470:	4b75      	ldr	r3, [pc, #468]	; (8001648 <MotorConfig+0x890>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001478:	6013      	str	r3, [r2, #0]
	TIM3->CCER |= 0x1000;
 800147a:	4a75      	ldr	r2, [pc, #468]	; (8001650 <MotorConfig+0x898>)
 800147c:	4b74      	ldr	r3, [pc, #464]	; (8001650 <MotorConfig+0x898>)
 800147e:	8c1b      	ldrh	r3, [r3, #32]
 8001480:	b29b      	uxth	r3, r3
 8001482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001486:	b29b      	uxth	r3, r3
 8001488:	8413      	strh	r3, [r2, #32]
	TIM3->CR1 |= 0x80;
 800148a:	4a71      	ldr	r2, [pc, #452]	; (8001650 <MotorConfig+0x898>)
 800148c:	4b70      	ldr	r3, [pc, #448]	; (8001650 <MotorConfig+0x898>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001496:	b29b      	uxth	r3, r3
 8001498:	8013      	strh	r3, [r2, #0]
	TIM3->CCMR2 |= 0x6800;
 800149a:	4a6d      	ldr	r2, [pc, #436]	; (8001650 <MotorConfig+0x898>)
 800149c:	4b6c      	ldr	r3, [pc, #432]	; (8001650 <MotorConfig+0x898>)
 800149e:	8b9b      	ldrh	r3, [r3, #28]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	8393      	strh	r3, [r2, #28]
	TIM2->ARR = 2399;
 80014aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ae:	f640 125f 	movw	r2, #2399	; 0x95f
 80014b2:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM2->PSC = 10;
 80014b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b8:	220a      	movs	r2, #10
 80014ba:	851a      	strh	r2, [r3, #40]	; 0x28
 80014bc:	e159      	b.n	8001772 <MotorConfig+0x9ba>
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_3){
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	4a61      	ldr	r2, [pc, #388]	; (8001648 <MotorConfig+0x890>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d142      	bne.n	800154c <MotorConfig+0x794>
 80014c6:	89bb      	ldrh	r3, [r7, #12]
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d13f      	bne.n	800154c <MotorConfig+0x794>

	RCC->APB1ENR |= 0x1;
 80014cc:	4a5f      	ldr	r2, [pc, #380]	; (800164c <MotorConfig+0x894>)
 80014ce:	4b5f      	ldr	r3, [pc, #380]	; (800164c <MotorConfig+0x894>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= 0x9;
 80014d8:	4a5c      	ldr	r2, [pc, #368]	; (800164c <MotorConfig+0x894>)
 80014da:	4b5c      	ldr	r3, [pc, #368]	; (800164c <MotorConfig+0x894>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f043 0309 	orr.w	r3, r3, #9
 80014e2:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFFF0FFF;
 80014e4:	4a58      	ldr	r2, [pc, #352]	; (8001648 <MotorConfig+0x890>)
 80014e6:	4b58      	ldr	r3, [pc, #352]	; (8001648 <MotorConfig+0x890>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80014ee:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0xB<<12);
 80014f0:	4a55      	ldr	r2, [pc, #340]	; (8001648 <MotorConfig+0x890>)
 80014f2:	4b55      	ldr	r3, [pc, #340]	; (8001648 <MotorConfig+0x890>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 80014fa:	6013      	str	r3, [r2, #0]
	TIM2->CCER |= 0x10;
 80014fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001504:	8c1b      	ldrh	r3, [r3, #32]
 8001506:	b29b      	uxth	r3, r3
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	b29b      	uxth	r3, r3
 800150e:	8413      	strh	r3, [r2, #32]
	TIM2->CR1 |= 0x80;
 8001510:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	b29b      	uxth	r3, r3
 8001522:	8013      	strh	r3, [r2, #0]
	TIM2->CCMR1 |= 0x6800;
 8001524:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800152c:	8b1b      	ldrh	r3, [r3, #24]
 800152e:	b29b      	uxth	r3, r3
 8001530:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8001534:	b29b      	uxth	r3, r3
 8001536:	8313      	strh	r3, [r2, #24]
	TIM2->ARR = 2399;
 8001538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800153c:	f640 125f 	movw	r2, #2399	; 0x95f
 8001540:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM2->PSC = 10;
 8001542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001546:	220a      	movs	r2, #10
 8001548:	851a      	strh	r2, [r3, #40]	; 0x28
 800154a:	e112      	b.n	8001772 <MotorConfig+0x9ba>
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_4){
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4a3e      	ldr	r2, [pc, #248]	; (8001648 <MotorConfig+0x890>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d13a      	bne.n	80015ca <MotorConfig+0x812>
 8001554:	89bb      	ldrh	r3, [r7, #12]
 8001556:	2b10      	cmp	r3, #16
 8001558:	d137      	bne.n	80015ca <MotorConfig+0x812>

	RCC->APB1ENR |= (0x1<<1);
 800155a:	4a3c      	ldr	r2, [pc, #240]	; (800164c <MotorConfig+0x894>)
 800155c:	4b3b      	ldr	r3, [pc, #236]	; (800164c <MotorConfig+0x894>)
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= 0x9;
 8001566:	4a39      	ldr	r2, [pc, #228]	; (800164c <MotorConfig+0x894>)
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <MotorConfig+0x894>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f043 0309 	orr.w	r3, r3, #9
 8001570:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFF0FFFF;
 8001572:	4a35      	ldr	r2, [pc, #212]	; (8001648 <MotorConfig+0x890>)
 8001574:	4b34      	ldr	r3, [pc, #208]	; (8001648 <MotorConfig+0x890>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800157c:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0xB<<16);
 800157e:	4a32      	ldr	r2, [pc, #200]	; (8001648 <MotorConfig+0x890>)
 8001580:	4b31      	ldr	r3, [pc, #196]	; (8001648 <MotorConfig+0x890>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f443 2330 	orr.w	r3, r3, #720896	; 0xb0000
 8001588:	6013      	str	r3, [r2, #0]
	TIM3->CCER |= 0x1;
 800158a:	4a31      	ldr	r2, [pc, #196]	; (8001650 <MotorConfig+0x898>)
 800158c:	4b30      	ldr	r3, [pc, #192]	; (8001650 <MotorConfig+0x898>)
 800158e:	8c1b      	ldrh	r3, [r3, #32]
 8001590:	b29b      	uxth	r3, r3
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	b29b      	uxth	r3, r3
 8001598:	8413      	strh	r3, [r2, #32]
	TIM3->CR1 |= 0x80;
 800159a:	4a2d      	ldr	r2, [pc, #180]	; (8001650 <MotorConfig+0x898>)
 800159c:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <MotorConfig+0x898>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	8013      	strh	r3, [r2, #0]
	TIM3->CCMR1 |= 0x68;
 80015aa:	4a29      	ldr	r2, [pc, #164]	; (8001650 <MotorConfig+0x898>)
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <MotorConfig+0x898>)
 80015ae:	8b1b      	ldrh	r3, [r3, #24]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	8313      	strh	r3, [r2, #24]
	TIM3->ARR = 2399;
 80015ba:	4b25      	ldr	r3, [pc, #148]	; (8001650 <MotorConfig+0x898>)
 80015bc:	f640 125f 	movw	r2, #2399	; 0x95f
 80015c0:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM3->PSC = 10;
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <MotorConfig+0x898>)
 80015c4:	220a      	movs	r2, #10
 80015c6:	851a      	strh	r2, [r3, #40]	; 0x28
 80015c8:	e0d3      	b.n	8001772 <MotorConfig+0x9ba>
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_5){
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <MotorConfig+0x890>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d140      	bne.n	8001654 <MotorConfig+0x89c>
 80015d2:	89bb      	ldrh	r3, [r7, #12]
 80015d4:	2b20      	cmp	r3, #32
 80015d6:	d13d      	bne.n	8001654 <MotorConfig+0x89c>

	RCC->APB1ENR |= (0x1<<1);
 80015d8:	4a1c      	ldr	r2, [pc, #112]	; (800164c <MotorConfig+0x894>)
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MotorConfig+0x894>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= 0x9;
 80015e4:	4a19      	ldr	r2, [pc, #100]	; (800164c <MotorConfig+0x894>)
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <MotorConfig+0x894>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f043 0309 	orr.w	r3, r3, #9
 80015ee:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFF0FFFFF;
 80015f0:	4a15      	ldr	r2, [pc, #84]	; (8001648 <MotorConfig+0x890>)
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MotorConfig+0x890>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80015fa:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0xB<<20);
 80015fc:	4a12      	ldr	r2, [pc, #72]	; (8001648 <MotorConfig+0x890>)
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MotorConfig+0x890>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8001606:	6013      	str	r3, [r2, #0]
	TIM3->CCER |= 0x10;
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <MotorConfig+0x898>)
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MotorConfig+0x898>)
 800160c:	8c1b      	ldrh	r3, [r3, #32]
 800160e:	b29b      	uxth	r3, r3
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	b29b      	uxth	r3, r3
 8001616:	8413      	strh	r3, [r2, #32]
	TIM3->CR1 |= 0x80;
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <MotorConfig+0x898>)
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <MotorConfig+0x898>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	b29b      	uxth	r3, r3
 8001626:	8013      	strh	r3, [r2, #0]
	TIM3->CCMR1 |= 0x6800;
 8001628:	4a09      	ldr	r2, [pc, #36]	; (8001650 <MotorConfig+0x898>)
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MotorConfig+0x898>)
 800162c:	8b1b      	ldrh	r3, [r3, #24]
 800162e:	b29b      	uxth	r3, r3
 8001630:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8001634:	b29b      	uxth	r3, r3
 8001636:	8313      	strh	r3, [r2, #24]
	TIM3->ARR = 2399;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <MotorConfig+0x898>)
 800163a:	f640 125f 	movw	r2, #2399	; 0x95f
 800163e:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM3->PSC = 10;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <MotorConfig+0x898>)
 8001642:	220a      	movs	r2, #10
 8001644:	851a      	strh	r2, [r3, #40]	; 0x28
 8001646:	e094      	b.n	8001772 <MotorConfig+0x9ba>
 8001648:	40010c00 	.word	0x40010c00
 800164c:	40021000 	.word	0x40021000
 8001650:	40000400 	.word	0x40000400
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_10){
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4a95      	ldr	r2, [pc, #596]	; (80018ac <MotorConfig+0xaf4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d143      	bne.n	80016e4 <MotorConfig+0x92c>
 800165c:	89bb      	ldrh	r3, [r7, #12]
 800165e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001662:	d13f      	bne.n	80016e4 <MotorConfig+0x92c>

	RCC->APB1ENR |= 0x1;
 8001664:	4a92      	ldr	r2, [pc, #584]	; (80018b0 <MotorConfig+0xaf8>)
 8001666:	4b92      	ldr	r3, [pc, #584]	; (80018b0 <MotorConfig+0xaf8>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= 0x9;
 8001670:	4a8f      	ldr	r2, [pc, #572]	; (80018b0 <MotorConfig+0xaf8>)
 8001672:	4b8f      	ldr	r3, [pc, #572]	; (80018b0 <MotorConfig+0xaf8>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f043 0309 	orr.w	r3, r3, #9
 800167a:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFFFFF0FF;
 800167c:	4a8b      	ldr	r2, [pc, #556]	; (80018ac <MotorConfig+0xaf4>)
 800167e:	4b8b      	ldr	r3, [pc, #556]	; (80018ac <MotorConfig+0xaf4>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001686:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0xB<<8);
 8001688:	4a88      	ldr	r2, [pc, #544]	; (80018ac <MotorConfig+0xaf4>)
 800168a:	4b88      	ldr	r3, [pc, #544]	; (80018ac <MotorConfig+0xaf4>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 8001692:	6053      	str	r3, [r2, #4]
	TIM2->CCER |= 0x100;
 8001694:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800169c:	8c1b      	ldrh	r3, [r3, #32]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	8413      	strh	r3, [r2, #32]
	TIM2->CR1 |= 0x80;
 80016a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	8013      	strh	r3, [r2, #0]
	TIM2->CCMR2 |= 0x68;
 80016bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c4:	8b9b      	ldrh	r3, [r3, #28]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	8393      	strh	r3, [r2, #28]
	TIM2->ARR= 2399;
 80016d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d4:	f640 125f 	movw	r2, #2399	; 0x95f
 80016d8:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM2->PSC = 10;
 80016da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016de:	220a      	movs	r2, #10
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28
 80016e2:	e046      	b.n	8001772 <MotorConfig+0x9ba>
}
else if (Port_Pin.pwm_port == GPIOB && Port_Pin.pwm_pin == GPIO_Pin_11){
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4a71      	ldr	r2, [pc, #452]	; (80018ac <MotorConfig+0xaf4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d142      	bne.n	8001772 <MotorConfig+0x9ba>
 80016ec:	89bb      	ldrh	r3, [r7, #12]
 80016ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016f2:	d13e      	bne.n	8001772 <MotorConfig+0x9ba>

	RCC->APB1ENR |= 0x1;
 80016f4:	4a6e      	ldr	r2, [pc, #440]	; (80018b0 <MotorConfig+0xaf8>)
 80016f6:	4b6e      	ldr	r3, [pc, #440]	; (80018b0 <MotorConfig+0xaf8>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= 0x9;
 8001700:	4a6b      	ldr	r2, [pc, #428]	; (80018b0 <MotorConfig+0xaf8>)
 8001702:	4b6b      	ldr	r3, [pc, #428]	; (80018b0 <MotorConfig+0xaf8>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f043 0309 	orr.w	r3, r3, #9
 800170a:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFFFF0FFF;
 800170c:	4a67      	ldr	r2, [pc, #412]	; (80018ac <MotorConfig+0xaf4>)
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <MotorConfig+0xaf4>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001716:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0xB<<12);
 8001718:	4a64      	ldr	r2, [pc, #400]	; (80018ac <MotorConfig+0xaf4>)
 800171a:	4b64      	ldr	r3, [pc, #400]	; (80018ac <MotorConfig+0xaf4>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 8001722:	6053      	str	r3, [r2, #4]
	TIM2->CCER |= 0x1000;
 8001724:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800172c:	8c1b      	ldrh	r3, [r3, #32]
 800172e:	b29b      	uxth	r3, r3
 8001730:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001734:	b29b      	uxth	r3, r3
 8001736:	8413      	strh	r3, [r2, #32]
	TIM2->CR1 |= 0x80;
 8001738:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800173c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	b29b      	uxth	r3, r3
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	b29b      	uxth	r3, r3
 800174a:	8013      	strh	r3, [r2, #0]
	TIM2->CCMR2 |= 0x6800;
 800174c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001754:	8b9b      	ldrh	r3, [r3, #28]
 8001756:	b29b      	uxth	r3, r3
 8001758:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 800175c:	b29b      	uxth	r3, r3
 800175e:	8393      	strh	r3, [r2, #28]
	TIM2->ARR = 2399;
 8001760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001764:	f640 125f 	movw	r2, #2399	; 0x95f
 8001768:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM2->PSC = 10;
 800176a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800176e:	220a      	movs	r2, #10
 8001770:	851a      	strh	r2, [r3, #40]	; 0x28
}

// forward pin

if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_0){ // direction settings for forward pin
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4a4f      	ldr	r2, [pc, #316]	; (80018b4 <MotorConfig+0xafc>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d115      	bne.n	80017a6 <MotorConfig+0x9ee>
 800177a:	8abb      	ldrh	r3, [r7, #20]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d112      	bne.n	80017a6 <MotorConfig+0x9ee>

	RCC->APB2ENR |= (0x1<<2);		// GPIO settings
 8001780:	4a4b      	ldr	r2, [pc, #300]	; (80018b0 <MotorConfig+0xaf8>)
 8001782:	4b4b      	ldr	r3, [pc, #300]	; (80018b0 <MotorConfig+0xaf8>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFFFFFF0;		// Relevant bits have set to 0
 800178c:	4a49      	ldr	r2, [pc, #292]	; (80018b4 <MotorConfig+0xafc>)
 800178e:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <MotorConfig+0xafc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 030f 	bic.w	r3, r3, #15
 8001796:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x3) ;				// Output mode and speed settings
 8001798:	4a46      	ldr	r2, [pc, #280]	; (80018b4 <MotorConfig+0xafc>)
 800179a:	4b46      	ldr	r3, [pc, #280]	; (80018b4 <MotorConfig+0xafc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f043 0303 	orr.w	r3, r3, #3
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e345      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_1){
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4a42      	ldr	r2, [pc, #264]	; (80018b4 <MotorConfig+0xafc>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d115      	bne.n	80017da <MotorConfig+0xa22>
 80017ae:	8abb      	ldrh	r3, [r7, #20]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d112      	bne.n	80017da <MotorConfig+0xa22>

	RCC->APB2ENR |= (0x1<<2);
 80017b4:	4a3e      	ldr	r2, [pc, #248]	; (80018b0 <MotorConfig+0xaf8>)
 80017b6:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <MotorConfig+0xaf8>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFFFFF0F;
 80017c0:	4a3c      	ldr	r2, [pc, #240]	; (80018b4 <MotorConfig+0xafc>)
 80017c2:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <MotorConfig+0xafc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017ca:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x30);
 80017cc:	4a39      	ldr	r2, [pc, #228]	; (80018b4 <MotorConfig+0xafc>)
 80017ce:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <MotorConfig+0xafc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e32b      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_2){
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4a35      	ldr	r2, [pc, #212]	; (80018b4 <MotorConfig+0xafc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d115      	bne.n	800180e <MotorConfig+0xa56>
 80017e2:	8abb      	ldrh	r3, [r7, #20]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d112      	bne.n	800180e <MotorConfig+0xa56>

	RCC->APB2ENR |= (0x1<<2);
 80017e8:	4a31      	ldr	r2, [pc, #196]	; (80018b0 <MotorConfig+0xaf8>)
 80017ea:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <MotorConfig+0xaf8>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFFFF0FF;
 80017f4:	4a2f      	ldr	r2, [pc, #188]	; (80018b4 <MotorConfig+0xafc>)
 80017f6:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <MotorConfig+0xafc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017fe:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x300) ;
 8001800:	4a2c      	ldr	r2, [pc, #176]	; (80018b4 <MotorConfig+0xafc>)
 8001802:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <MotorConfig+0xafc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e311      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_3){
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4a28      	ldr	r2, [pc, #160]	; (80018b4 <MotorConfig+0xafc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d115      	bne.n	8001842 <MotorConfig+0xa8a>
 8001816:	8abb      	ldrh	r3, [r7, #20]
 8001818:	2b08      	cmp	r3, #8
 800181a:	d112      	bne.n	8001842 <MotorConfig+0xa8a>

	RCC->APB2ENR |= (0x1<<2);
 800181c:	4a24      	ldr	r2, [pc, #144]	; (80018b0 <MotorConfig+0xaf8>)
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <MotorConfig+0xaf8>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFFF0FFF;
 8001828:	4a22      	ldr	r2, [pc, #136]	; (80018b4 <MotorConfig+0xafc>)
 800182a:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <MotorConfig+0xafc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001832:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x3000);
 8001834:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <MotorConfig+0xafc>)
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <MotorConfig+0xafc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	e2f7      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_4){
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <MotorConfig+0xafc>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d115      	bne.n	8001876 <MotorConfig+0xabe>
 800184a:	8abb      	ldrh	r3, [r7, #20]
 800184c:	2b10      	cmp	r3, #16
 800184e:	d112      	bne.n	8001876 <MotorConfig+0xabe>

	RCC->APB2ENR |= (0x1<<2);
 8001850:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <MotorConfig+0xaf8>)
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MotorConfig+0xaf8>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFF0FFFF;
 800185c:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <MotorConfig+0xafc>)
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <MotorConfig+0xafc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001866:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x30000);
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <MotorConfig+0xafc>)
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <MotorConfig+0xafc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e2dd      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_5){
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <MotorConfig+0xafc>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d11c      	bne.n	80018b8 <MotorConfig+0xb00>
 800187e:	8abb      	ldrh	r3, [r7, #20]
 8001880:	2b20      	cmp	r3, #32
 8001882:	d119      	bne.n	80018b8 <MotorConfig+0xb00>

	RCC->APB2ENR |= (0x1<<2);
 8001884:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <MotorConfig+0xaf8>)
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <MotorConfig+0xaf8>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFF0FFFFF;
 8001890:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <MotorConfig+0xafc>)
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MotorConfig+0xafc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800189a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x300000);
 800189c:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <MotorConfig+0xafc>)
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <MotorConfig+0xafc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e2c3      	b.n	8001e32 <MotorConfig+0x107a>
 80018aa:	bf00      	nop
 80018ac:	40010c00 	.word	0x40010c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010800 	.word	0x40010800
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_6){
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4a92      	ldr	r2, [pc, #584]	; (8001b04 <MotorConfig+0xd4c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d115      	bne.n	80018ec <MotorConfig+0xb34>
 80018c0:	8abb      	ldrh	r3, [r7, #20]
 80018c2:	2b40      	cmp	r3, #64	; 0x40
 80018c4:	d112      	bne.n	80018ec <MotorConfig+0xb34>

	RCC->APB2ENR |= (0x1<<2);
 80018c6:	4a90      	ldr	r2, [pc, #576]	; (8001b08 <MotorConfig+0xd50>)
 80018c8:	4b8f      	ldr	r3, [pc, #572]	; (8001b08 <MotorConfig+0xd50>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xF0FFFFFF;
 80018d2:	4a8c      	ldr	r2, [pc, #560]	; (8001b04 <MotorConfig+0xd4c>)
 80018d4:	4b8b      	ldr	r3, [pc, #556]	; (8001b04 <MotorConfig+0xd4c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80018dc:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x3000000);
 80018de:	4a89      	ldr	r2, [pc, #548]	; (8001b04 <MotorConfig+0xd4c>)
 80018e0:	4b88      	ldr	r3, [pc, #544]	; (8001b04 <MotorConfig+0xd4c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e2a2      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_7){
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4a85      	ldr	r2, [pc, #532]	; (8001b04 <MotorConfig+0xd4c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d115      	bne.n	8001920 <MotorConfig+0xb68>
 80018f4:	8abb      	ldrh	r3, [r7, #20]
 80018f6:	2b80      	cmp	r3, #128	; 0x80
 80018f8:	d112      	bne.n	8001920 <MotorConfig+0xb68>

	RCC->APB2ENR |= (0x1<<2);
 80018fa:	4a83      	ldr	r2, [pc, #524]	; (8001b08 <MotorConfig+0xd50>)
 80018fc:	4b82      	ldr	r3, [pc, #520]	; (8001b08 <MotorConfig+0xd50>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0x0FFFFFFF;
 8001906:	4a7f      	ldr	r2, [pc, #508]	; (8001b04 <MotorConfig+0xd4c>)
 8001908:	4b7e      	ldr	r3, [pc, #504]	; (8001b04 <MotorConfig+0xd4c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001910:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x30000000);
 8001912:	4a7c      	ldr	r2, [pc, #496]	; (8001b04 <MotorConfig+0xd4c>)
 8001914:	4b7b      	ldr	r3, [pc, #492]	; (8001b04 <MotorConfig+0xd4c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e288      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_8){
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4a78      	ldr	r2, [pc, #480]	; (8001b04 <MotorConfig+0xd4c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d116      	bne.n	8001956 <MotorConfig+0xb9e>
 8001928:	8abb      	ldrh	r3, [r7, #20]
 800192a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800192e:	d112      	bne.n	8001956 <MotorConfig+0xb9e>

	RCC->APB2ENR |= (0x1<<2);
 8001930:	4a75      	ldr	r2, [pc, #468]	; (8001b08 <MotorConfig+0xd50>)
 8001932:	4b75      	ldr	r3, [pc, #468]	; (8001b08 <MotorConfig+0xd50>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFFFFF0;
 800193c:	4a71      	ldr	r2, [pc, #452]	; (8001b04 <MotorConfig+0xd4c>)
 800193e:	4b71      	ldr	r3, [pc, #452]	; (8001b04 <MotorConfig+0xd4c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f023 030f 	bic.w	r3, r3, #15
 8001946:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x3);
 8001948:	4a6e      	ldr	r2, [pc, #440]	; (8001b04 <MotorConfig+0xd4c>)
 800194a:	4b6e      	ldr	r3, [pc, #440]	; (8001b04 <MotorConfig+0xd4c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f043 0303 	orr.w	r3, r3, #3
 8001952:	6053      	str	r3, [r2, #4]
 8001954:	e26d      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_9){
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4a6a      	ldr	r2, [pc, #424]	; (8001b04 <MotorConfig+0xd4c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d116      	bne.n	800198c <MotorConfig+0xbd4>
 800195e:	8abb      	ldrh	r3, [r7, #20]
 8001960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001964:	d112      	bne.n	800198c <MotorConfig+0xbd4>

	RCC->APB2ENR |= (0x1<<2);
 8001966:	4a68      	ldr	r2, [pc, #416]	; (8001b08 <MotorConfig+0xd50>)
 8001968:	4b67      	ldr	r3, [pc, #412]	; (8001b08 <MotorConfig+0xd50>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFFFF0F;
 8001972:	4a64      	ldr	r2, [pc, #400]	; (8001b04 <MotorConfig+0xd4c>)
 8001974:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <MotorConfig+0xd4c>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800197c:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x30);
 800197e:	4a61      	ldr	r2, [pc, #388]	; (8001b04 <MotorConfig+0xd4c>)
 8001980:	4b60      	ldr	r3, [pc, #384]	; (8001b04 <MotorConfig+0xd4c>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001988:	6053      	str	r3, [r2, #4]
 800198a:	e252      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_10){
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4a5d      	ldr	r2, [pc, #372]	; (8001b04 <MotorConfig+0xd4c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d116      	bne.n	80019c2 <MotorConfig+0xc0a>
 8001994:	8abb      	ldrh	r3, [r7, #20]
 8001996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800199a:	d112      	bne.n	80019c2 <MotorConfig+0xc0a>

	RCC->APB2ENR |= (0x1<<2);
 800199c:	4a5a      	ldr	r2, [pc, #360]	; (8001b08 <MotorConfig+0xd50>)
 800199e:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <MotorConfig+0xd50>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFFF0FF;
 80019a8:	4a56      	ldr	r2, [pc, #344]	; (8001b04 <MotorConfig+0xd4c>)
 80019aa:	4b56      	ldr	r3, [pc, #344]	; (8001b04 <MotorConfig+0xd4c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019b2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x300);
 80019b4:	4a53      	ldr	r2, [pc, #332]	; (8001b04 <MotorConfig+0xd4c>)
 80019b6:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <MotorConfig+0xd4c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019be:	6053      	str	r3, [r2, #4]
 80019c0:	e237      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_11){
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4a4f      	ldr	r2, [pc, #316]	; (8001b04 <MotorConfig+0xd4c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d116      	bne.n	80019f8 <MotorConfig+0xc40>
 80019ca:	8abb      	ldrh	r3, [r7, #20]
 80019cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019d0:	d112      	bne.n	80019f8 <MotorConfig+0xc40>

	RCC->APB2ENR |= (0x1<<2);
 80019d2:	4a4d      	ldr	r2, [pc, #308]	; (8001b08 <MotorConfig+0xd50>)
 80019d4:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <MotorConfig+0xd50>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFF0FFF;
 80019de:	4a49      	ldr	r2, [pc, #292]	; (8001b04 <MotorConfig+0xd4c>)
 80019e0:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <MotorConfig+0xd4c>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80019e8:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x3000);
 80019ea:	4a46      	ldr	r2, [pc, #280]	; (8001b04 <MotorConfig+0xd4c>)
 80019ec:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <MotorConfig+0xd4c>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80019f4:	6053      	str	r3, [r2, #4]
 80019f6:	e21c      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_12){
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4a42      	ldr	r2, [pc, #264]	; (8001b04 <MotorConfig+0xd4c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d116      	bne.n	8001a2e <MotorConfig+0xc76>
 8001a00:	8abb      	ldrh	r3, [r7, #20]
 8001a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a06:	d112      	bne.n	8001a2e <MotorConfig+0xc76>

	RCC->APB2ENR |= (0x1<<2);
 8001a08:	4a3f      	ldr	r2, [pc, #252]	; (8001b08 <MotorConfig+0xd50>)
 8001a0a:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <MotorConfig+0xd50>)
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFF0FFFF;
 8001a14:	4a3b      	ldr	r2, [pc, #236]	; (8001b04 <MotorConfig+0xd4c>)
 8001a16:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <MotorConfig+0xd4c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001a1e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x30000);
 8001a20:	4a38      	ldr	r2, [pc, #224]	; (8001b04 <MotorConfig+0xd4c>)
 8001a22:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <MotorConfig+0xd4c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001a2a:	6053      	str	r3, [r2, #4]
 8001a2c:	e201      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_13){
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4a34      	ldr	r2, [pc, #208]	; (8001b04 <MotorConfig+0xd4c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d116      	bne.n	8001a64 <MotorConfig+0xcac>
 8001a36:	8abb      	ldrh	r3, [r7, #20]
 8001a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a3c:	d112      	bne.n	8001a64 <MotorConfig+0xcac>

	RCC->APB2ENR |= (0x1<<2);
 8001a3e:	4a32      	ldr	r2, [pc, #200]	; (8001b08 <MotorConfig+0xd50>)
 8001a40:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <MotorConfig+0xd50>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFF0FFFFF;
 8001a4a:	4a2e      	ldr	r2, [pc, #184]	; (8001b04 <MotorConfig+0xd4c>)
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <MotorConfig+0xd4c>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001a54:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x300000);
 8001a56:	4a2b      	ldr	r2, [pc, #172]	; (8001b04 <MotorConfig+0xd4c>)
 8001a58:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <MotorConfig+0xd4c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001a60:	6053      	str	r3, [r2, #4]
 8001a62:	e1e6      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_14){
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <MotorConfig+0xd4c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d116      	bne.n	8001a9a <MotorConfig+0xce2>
 8001a6c:	8abb      	ldrh	r3, [r7, #20]
 8001a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a72:	d112      	bne.n	8001a9a <MotorConfig+0xce2>

	RCC->APB2ENR |= (0x1<<2);
 8001a74:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <MotorConfig+0xd50>)
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <MotorConfig+0xd50>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xF0FFFFFF;
 8001a80:	4a20      	ldr	r2, [pc, #128]	; (8001b04 <MotorConfig+0xd4c>)
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <MotorConfig+0xd4c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001a8a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x3000000);
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <MotorConfig+0xd4c>)
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <MotorConfig+0xd4c>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001a96:	6053      	str	r3, [r2, #4]
 8001a98:	e1cb      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOA && Port_Pin.forward_pin == GPIO_Pin_15){
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <MotorConfig+0xd4c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d116      	bne.n	8001ad0 <MotorConfig+0xd18>
 8001aa2:	8abb      	ldrh	r3, [r7, #20]
 8001aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aa8:	d112      	bne.n	8001ad0 <MotorConfig+0xd18>

	RCC->APB2ENR |= (0x1<<2);
 8001aaa:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <MotorConfig+0xd50>)
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <MotorConfig+0xd50>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0x0FFFFFFF;
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <MotorConfig+0xd4c>)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MotorConfig+0xd4c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001ac0:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x30000000);
 8001ac2:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <MotorConfig+0xd4c>)
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MotorConfig+0xd4c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001acc:	6053      	str	r3, [r2, #4]
 8001ace:	e1b0      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_0){
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <MotorConfig+0xd54>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d11b      	bne.n	8001b10 <MotorConfig+0xd58>
 8001ad8:	8abb      	ldrh	r3, [r7, #20]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d118      	bne.n	8001b10 <MotorConfig+0xd58>

	RCC->APB2ENR |= (0x1<<3);
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <MotorConfig+0xd50>)
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MotorConfig+0xd50>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f043 0308 	orr.w	r3, r3, #8
 8001ae8:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFFFFFF0;
 8001aea:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <MotorConfig+0xd54>)
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <MotorConfig+0xd54>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 030f 	bic.w	r3, r3, #15
 8001af4:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x3) ;
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <MotorConfig+0xd54>)
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <MotorConfig+0xd54>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f043 0303 	orr.w	r3, r3, #3
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e196      	b.n	8001e32 <MotorConfig+0x107a>
 8001b04:	40010800 	.word	0x40010800
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010c00 	.word	0x40010c00

}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_1){
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4a90      	ldr	r2, [pc, #576]	; (8001d54 <MotorConfig+0xf9c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d115      	bne.n	8001b44 <MotorConfig+0xd8c>
 8001b18:	8abb      	ldrh	r3, [r7, #20]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d112      	bne.n	8001b44 <MotorConfig+0xd8c>

	RCC->APB2ENR |= (0x1<<3);
 8001b1e:	4a8e      	ldr	r2, [pc, #568]	; (8001d58 <MotorConfig+0xfa0>)
 8001b20:	4b8d      	ldr	r3, [pc, #564]	; (8001d58 <MotorConfig+0xfa0>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFFFFF0F;
 8001b2a:	4a8a      	ldr	r2, [pc, #552]	; (8001d54 <MotorConfig+0xf9c>)
 8001b2c:	4b89      	ldr	r3, [pc, #548]	; (8001d54 <MotorConfig+0xf9c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b34:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x30);
 8001b36:	4a87      	ldr	r2, [pc, #540]	; (8001d54 <MotorConfig+0xf9c>)
 8001b38:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <MotorConfig+0xf9c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e176      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_2){
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4a83      	ldr	r2, [pc, #524]	; (8001d54 <MotorConfig+0xf9c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d115      	bne.n	8001b78 <MotorConfig+0xdc0>
 8001b4c:	8abb      	ldrh	r3, [r7, #20]
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d112      	bne.n	8001b78 <MotorConfig+0xdc0>

	RCC->APB2ENR |= (0x1<<3);
 8001b52:	4a81      	ldr	r2, [pc, #516]	; (8001d58 <MotorConfig+0xfa0>)
 8001b54:	4b80      	ldr	r3, [pc, #512]	; (8001d58 <MotorConfig+0xfa0>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f043 0308 	orr.w	r3, r3, #8
 8001b5c:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFFFF0FF;
 8001b5e:	4a7d      	ldr	r2, [pc, #500]	; (8001d54 <MotorConfig+0xf9c>)
 8001b60:	4b7c      	ldr	r3, [pc, #496]	; (8001d54 <MotorConfig+0xf9c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b68:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x300);
 8001b6a:	4a7a      	ldr	r2, [pc, #488]	; (8001d54 <MotorConfig+0xf9c>)
 8001b6c:	4b79      	ldr	r3, [pc, #484]	; (8001d54 <MotorConfig+0xf9c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e15c      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_3){
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4a76      	ldr	r2, [pc, #472]	; (8001d54 <MotorConfig+0xf9c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d115      	bne.n	8001bac <MotorConfig+0xdf4>
 8001b80:	8abb      	ldrh	r3, [r7, #20]
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d112      	bne.n	8001bac <MotorConfig+0xdf4>

	RCC->APB2ENR |= (0x1<<3);
 8001b86:	4a74      	ldr	r2, [pc, #464]	; (8001d58 <MotorConfig+0xfa0>)
 8001b88:	4b73      	ldr	r3, [pc, #460]	; (8001d58 <MotorConfig+0xfa0>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f043 0308 	orr.w	r3, r3, #8
 8001b90:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFFF0FFF;
 8001b92:	4a70      	ldr	r2, [pc, #448]	; (8001d54 <MotorConfig+0xf9c>)
 8001b94:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <MotorConfig+0xf9c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b9c:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x3000);
 8001b9e:	4a6d      	ldr	r2, [pc, #436]	; (8001d54 <MotorConfig+0xf9c>)
 8001ba0:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <MotorConfig+0xf9c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e142      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_4){
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4a69      	ldr	r2, [pc, #420]	; (8001d54 <MotorConfig+0xf9c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d115      	bne.n	8001be0 <MotorConfig+0xe28>
 8001bb4:	8abb      	ldrh	r3, [r7, #20]
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d112      	bne.n	8001be0 <MotorConfig+0xe28>

	RCC->APB2ENR |= (0x1<<3);
 8001bba:	4a67      	ldr	r2, [pc, #412]	; (8001d58 <MotorConfig+0xfa0>)
 8001bbc:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <MotorConfig+0xfa0>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f043 0308 	orr.w	r3, r3, #8
 8001bc4:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFF0FFFF;
 8001bc6:	4a63      	ldr	r2, [pc, #396]	; (8001d54 <MotorConfig+0xf9c>)
 8001bc8:	4b62      	ldr	r3, [pc, #392]	; (8001d54 <MotorConfig+0xf9c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001bd0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x30000);
 8001bd2:	4a60      	ldr	r2, [pc, #384]	; (8001d54 <MotorConfig+0xf9c>)
 8001bd4:	4b5f      	ldr	r3, [pc, #380]	; (8001d54 <MotorConfig+0xf9c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e128      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_5){
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4a5c      	ldr	r2, [pc, #368]	; (8001d54 <MotorConfig+0xf9c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d115      	bne.n	8001c14 <MotorConfig+0xe5c>
 8001be8:	8abb      	ldrh	r3, [r7, #20]
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d112      	bne.n	8001c14 <MotorConfig+0xe5c>

	RCC->APB2ENR |= (0x1<<3);
 8001bee:	4a5a      	ldr	r2, [pc, #360]	; (8001d58 <MotorConfig+0xfa0>)
 8001bf0:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <MotorConfig+0xfa0>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f043 0308 	orr.w	r3, r3, #8
 8001bf8:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFF0FFFFF;
 8001bfa:	4a56      	ldr	r2, [pc, #344]	; (8001d54 <MotorConfig+0xf9c>)
 8001bfc:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <MotorConfig+0xf9c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001c04:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x300000);
 8001c06:	4a53      	ldr	r2, [pc, #332]	; (8001d54 <MotorConfig+0xf9c>)
 8001c08:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <MotorConfig+0xf9c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e10e      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_6){
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4a4f      	ldr	r2, [pc, #316]	; (8001d54 <MotorConfig+0xf9c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d115      	bne.n	8001c48 <MotorConfig+0xe90>
 8001c1c:	8abb      	ldrh	r3, [r7, #20]
 8001c1e:	2b40      	cmp	r3, #64	; 0x40
 8001c20:	d112      	bne.n	8001c48 <MotorConfig+0xe90>

	RCC->APB2ENR |= (0x1<<3);
 8001c22:	4a4d      	ldr	r2, [pc, #308]	; (8001d58 <MotorConfig+0xfa0>)
 8001c24:	4b4c      	ldr	r3, [pc, #304]	; (8001d58 <MotorConfig+0xfa0>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xF0FFFFFF;
 8001c2e:	4a49      	ldr	r2, [pc, #292]	; (8001d54 <MotorConfig+0xf9c>)
 8001c30:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <MotorConfig+0xf9c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001c38:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x3000000);
 8001c3a:	4a46      	ldr	r2, [pc, #280]	; (8001d54 <MotorConfig+0xf9c>)
 8001c3c:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <MotorConfig+0xf9c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e0f4      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_7){
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4a42      	ldr	r2, [pc, #264]	; (8001d54 <MotorConfig+0xf9c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d115      	bne.n	8001c7c <MotorConfig+0xec4>
 8001c50:	8abb      	ldrh	r3, [r7, #20]
 8001c52:	2b80      	cmp	r3, #128	; 0x80
 8001c54:	d112      	bne.n	8001c7c <MotorConfig+0xec4>

	RCC->APB2ENR |= (0x1<<3);
 8001c56:	4a40      	ldr	r2, [pc, #256]	; (8001d58 <MotorConfig+0xfa0>)
 8001c58:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <MotorConfig+0xfa0>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0x0FFFFFFF;
 8001c62:	4a3c      	ldr	r2, [pc, #240]	; (8001d54 <MotorConfig+0xf9c>)
 8001c64:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <MotorConfig+0xf9c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c6c:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x30000000);
 8001c6e:	4a39      	ldr	r2, [pc, #228]	; (8001d54 <MotorConfig+0xf9c>)
 8001c70:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <MotorConfig+0xf9c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e0da      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_8){
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4a35      	ldr	r2, [pc, #212]	; (8001d54 <MotorConfig+0xf9c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d116      	bne.n	8001cb2 <MotorConfig+0xefa>
 8001c84:	8abb      	ldrh	r3, [r7, #20]
 8001c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c8a:	d112      	bne.n	8001cb2 <MotorConfig+0xefa>

	RCC->APB2ENR |= (0x1<<3);
 8001c8c:	4a32      	ldr	r2, [pc, #200]	; (8001d58 <MotorConfig+0xfa0>)
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <MotorConfig+0xfa0>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFFFFFFF0;
 8001c98:	4a2e      	ldr	r2, [pc, #184]	; (8001d54 <MotorConfig+0xf9c>)
 8001c9a:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <MotorConfig+0xf9c>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f023 030f 	bic.w	r3, r3, #15
 8001ca2:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x3);
 8001ca4:	4a2b      	ldr	r2, [pc, #172]	; (8001d54 <MotorConfig+0xf9c>)
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <MotorConfig+0xf9c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f043 0303 	orr.w	r3, r3, #3
 8001cae:	6053      	str	r3, [r2, #4]
 8001cb0:	e0bf      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_9){
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <MotorConfig+0xf9c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d116      	bne.n	8001ce8 <MotorConfig+0xf30>
 8001cba:	8abb      	ldrh	r3, [r7, #20]
 8001cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc0:	d112      	bne.n	8001ce8 <MotorConfig+0xf30>

	RCC->APB2ENR |= (0x1<<3);
 8001cc2:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <MotorConfig+0xfa0>)
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <MotorConfig+0xfa0>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFFFFFF0F;
 8001cce:	4a21      	ldr	r2, [pc, #132]	; (8001d54 <MotorConfig+0xf9c>)
 8001cd0:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <MotorConfig+0xf9c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cd8:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x30);
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <MotorConfig+0xf9c>)
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <MotorConfig+0xf9c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001ce4:	6053      	str	r3, [r2, #4]
 8001ce6:	e0a4      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_10){
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4a1a      	ldr	r2, [pc, #104]	; (8001d54 <MotorConfig+0xf9c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d116      	bne.n	8001d1e <MotorConfig+0xf66>
 8001cf0:	8abb      	ldrh	r3, [r7, #20]
 8001cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf6:	d112      	bne.n	8001d1e <MotorConfig+0xf66>

	RCC->APB2ENR |= (0x1<<3);
 8001cf8:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <MotorConfig+0xfa0>)
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <MotorConfig+0xfa0>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f043 0308 	orr.w	r3, r3, #8
 8001d02:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFFFFF0FF;
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <MotorConfig+0xf9c>)
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <MotorConfig+0xf9c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d0e:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x300);
 8001d10:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <MotorConfig+0xf9c>)
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <MotorConfig+0xf9c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001d1a:	6053      	str	r3, [r2, #4]
 8001d1c:	e089      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_11){
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4a0c      	ldr	r2, [pc, #48]	; (8001d54 <MotorConfig+0xf9c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d11a      	bne.n	8001d5c <MotorConfig+0xfa4>
 8001d26:	8abb      	ldrh	r3, [r7, #20]
 8001d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d2c:	d116      	bne.n	8001d5c <MotorConfig+0xfa4>

	RCC->APB2ENR |= (0x1<<3);
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <MotorConfig+0xfa0>)
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MotorConfig+0xfa0>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFFFF0FFF;
 8001d3a:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <MotorConfig+0xf9c>)
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <MotorConfig+0xf9c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d44:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x3000);
 8001d46:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <MotorConfig+0xf9c>)
 8001d48:	4b02      	ldr	r3, [pc, #8]	; (8001d54 <MotorConfig+0xf9c>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001d50:	6053      	str	r3, [r2, #4]
 8001d52:	e06e      	b.n	8001e32 <MotorConfig+0x107a>
 8001d54:	40010c00 	.word	0x40010c00
 8001d58:	40021000 	.word	0x40021000
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_12){
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4a90      	ldr	r2, [pc, #576]	; (8001fa0 <MotorConfig+0x11e8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d116      	bne.n	8001d92 <MotorConfig+0xfda>
 8001d64:	8abb      	ldrh	r3, [r7, #20]
 8001d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6a:	d112      	bne.n	8001d92 <MotorConfig+0xfda>

	RCC->APB2ENR |= (0x1<<3);
 8001d6c:	4a8d      	ldr	r2, [pc, #564]	; (8001fa4 <MotorConfig+0x11ec>)
 8001d6e:	4b8d      	ldr	r3, [pc, #564]	; (8001fa4 <MotorConfig+0x11ec>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFFF0FFFF;
 8001d78:	4a89      	ldr	r2, [pc, #548]	; (8001fa0 <MotorConfig+0x11e8>)
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <MotorConfig+0x11e8>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001d82:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x30000);
 8001d84:	4a86      	ldr	r2, [pc, #536]	; (8001fa0 <MotorConfig+0x11e8>)
 8001d86:	4b86      	ldr	r3, [pc, #536]	; (8001fa0 <MotorConfig+0x11e8>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001d8e:	6053      	str	r3, [r2, #4]
 8001d90:	e04f      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_13){
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4a82      	ldr	r2, [pc, #520]	; (8001fa0 <MotorConfig+0x11e8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d116      	bne.n	8001dc8 <MotorConfig+0x1010>
 8001d9a:	8abb      	ldrh	r3, [r7, #20]
 8001d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da0:	d112      	bne.n	8001dc8 <MotorConfig+0x1010>

	RCC->APB2ENR |= (0x1<<3);
 8001da2:	4a80      	ldr	r2, [pc, #512]	; (8001fa4 <MotorConfig+0x11ec>)
 8001da4:	4b7f      	ldr	r3, [pc, #508]	; (8001fa4 <MotorConfig+0x11ec>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f043 0308 	orr.w	r3, r3, #8
 8001dac:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFF0FFFFF;
 8001dae:	4a7c      	ldr	r2, [pc, #496]	; (8001fa0 <MotorConfig+0x11e8>)
 8001db0:	4b7b      	ldr	r3, [pc, #492]	; (8001fa0 <MotorConfig+0x11e8>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001db8:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x300000);
 8001dba:	4a79      	ldr	r2, [pc, #484]	; (8001fa0 <MotorConfig+0x11e8>)
 8001dbc:	4b78      	ldr	r3, [pc, #480]	; (8001fa0 <MotorConfig+0x11e8>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001dc4:	6053      	str	r3, [r2, #4]
 8001dc6:	e034      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_14){
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4a75      	ldr	r2, [pc, #468]	; (8001fa0 <MotorConfig+0x11e8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d116      	bne.n	8001dfe <MotorConfig+0x1046>
 8001dd0:	8abb      	ldrh	r3, [r7, #20]
 8001dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dd6:	d112      	bne.n	8001dfe <MotorConfig+0x1046>

	RCC->APB2ENR |= (0x1<<3);
 8001dd8:	4a72      	ldr	r2, [pc, #456]	; (8001fa4 <MotorConfig+0x11ec>)
 8001dda:	4b72      	ldr	r3, [pc, #456]	; (8001fa4 <MotorConfig+0x11ec>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xF0FFFFFF;
 8001de4:	4a6e      	ldr	r2, [pc, #440]	; (8001fa0 <MotorConfig+0x11e8>)
 8001de6:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <MotorConfig+0x11e8>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001dee:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x3000000);
 8001df0:	4a6b      	ldr	r2, [pc, #428]	; (8001fa0 <MotorConfig+0x11e8>)
 8001df2:	4b6b      	ldr	r3, [pc, #428]	; (8001fa0 <MotorConfig+0x11e8>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001dfa:	6053      	str	r3, [r2, #4]
 8001dfc:	e019      	b.n	8001e32 <MotorConfig+0x107a>
}
else if (Port_Pin.forward_port == GPIOB && Port_Pin.forward_pin == GPIO_Pin_15){
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4a67      	ldr	r2, [pc, #412]	; (8001fa0 <MotorConfig+0x11e8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d115      	bne.n	8001e32 <MotorConfig+0x107a>
 8001e06:	8abb      	ldrh	r3, [r7, #20]
 8001e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e0c:	d111      	bne.n	8001e32 <MotorConfig+0x107a>

	RCC->APB2ENR |= (0x1<<3);
 8001e0e:	4a65      	ldr	r2, [pc, #404]	; (8001fa4 <MotorConfig+0x11ec>)
 8001e10:	4b64      	ldr	r3, [pc, #400]	; (8001fa4 <MotorConfig+0x11ec>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f043 0308 	orr.w	r3, r3, #8
 8001e18:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0x0FFFFFFF;
 8001e1a:	4a61      	ldr	r2, [pc, #388]	; (8001fa0 <MotorConfig+0x11e8>)
 8001e1c:	4b60      	ldr	r3, [pc, #384]	; (8001fa0 <MotorConfig+0x11e8>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e24:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x30000000);
 8001e26:	4a5e      	ldr	r2, [pc, #376]	; (8001fa0 <MotorConfig+0x11e8>)
 8001e28:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <MotorConfig+0x11e8>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001e30:	6053      	str	r3, [r2, #4]
}

	// backward pin

if(Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_0){		// direction settings for forward pin
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4a5c      	ldr	r2, [pc, #368]	; (8001fa8 <MotorConfig+0x11f0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d115      	bne.n	8001e66 <MotorConfig+0x10ae>
 8001e3a:	8bbb      	ldrh	r3, [r7, #28]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d112      	bne.n	8001e66 <MotorConfig+0x10ae>

	RCC->APB2ENR |= (0x1<<2); 	// GPIO settings
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <MotorConfig+0x11ec>)
 8001e42:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <MotorConfig+0x11ec>)
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFFFFFF0;		// Relevant bits have set to 0
 8001e4c:	4a56      	ldr	r2, [pc, #344]	; (8001fa8 <MotorConfig+0x11f0>)
 8001e4e:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <MotorConfig+0x11f0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 030f 	bic.w	r3, r3, #15
 8001e56:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x3);				// Output mode and speed settings
 8001e58:	4a53      	ldr	r2, [pc, #332]	; (8001fa8 <MotorConfig+0x11f0>)
 8001e5a:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <MotorConfig+0x11f0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f043 0303 	orr.w	r3, r3, #3
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	e347      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_1){
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4a4f      	ldr	r2, [pc, #316]	; (8001fa8 <MotorConfig+0x11f0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d115      	bne.n	8001e9a <MotorConfig+0x10e2>
 8001e6e:	8bbb      	ldrh	r3, [r7, #28]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d112      	bne.n	8001e9a <MotorConfig+0x10e2>

	RCC->APB2ENR |= (0x1<<2);
 8001e74:	4a4b      	ldr	r2, [pc, #300]	; (8001fa4 <MotorConfig+0x11ec>)
 8001e76:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <MotorConfig+0x11ec>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFFFFF0F;
 8001e80:	4a49      	ldr	r2, [pc, #292]	; (8001fa8 <MotorConfig+0x11f0>)
 8001e82:	4b49      	ldr	r3, [pc, #292]	; (8001fa8 <MotorConfig+0x11f0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e8a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x30);
 8001e8c:	4a46      	ldr	r2, [pc, #280]	; (8001fa8 <MotorConfig+0x11f0>)
 8001e8e:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <MotorConfig+0x11f0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e32d      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_2){
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4a42      	ldr	r2, [pc, #264]	; (8001fa8 <MotorConfig+0x11f0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d115      	bne.n	8001ece <MotorConfig+0x1116>
 8001ea2:	8bbb      	ldrh	r3, [r7, #28]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d112      	bne.n	8001ece <MotorConfig+0x1116>

	RCC->APB2ENR |= (0x1<<2);
 8001ea8:	4a3e      	ldr	r2, [pc, #248]	; (8001fa4 <MotorConfig+0x11ec>)
 8001eaa:	4b3e      	ldr	r3, [pc, #248]	; (8001fa4 <MotorConfig+0x11ec>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFFFF0FF;
 8001eb4:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <MotorConfig+0x11f0>)
 8001eb6:	4b3c      	ldr	r3, [pc, #240]	; (8001fa8 <MotorConfig+0x11f0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ebe:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x300);
 8001ec0:	4a39      	ldr	r2, [pc, #228]	; (8001fa8 <MotorConfig+0x11f0>)
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <MotorConfig+0x11f0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e313      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_3){
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4a35      	ldr	r2, [pc, #212]	; (8001fa8 <MotorConfig+0x11f0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d115      	bne.n	8001f02 <MotorConfig+0x114a>
 8001ed6:	8bbb      	ldrh	r3, [r7, #28]
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d112      	bne.n	8001f02 <MotorConfig+0x114a>

	RCC->APB2ENR |= (0x1<<2);
 8001edc:	4a31      	ldr	r2, [pc, #196]	; (8001fa4 <MotorConfig+0x11ec>)
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <MotorConfig+0x11ec>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFFF0FFF;
 8001ee8:	4a2f      	ldr	r2, [pc, #188]	; (8001fa8 <MotorConfig+0x11f0>)
 8001eea:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <MotorConfig+0x11f0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ef2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x3000);
 8001ef4:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <MotorConfig+0x11f0>)
 8001ef6:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <MotorConfig+0x11f0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	e2f9      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_4){
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	4a28      	ldr	r2, [pc, #160]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d115      	bne.n	8001f36 <MotorConfig+0x117e>
 8001f0a:	8bbb      	ldrh	r3, [r7, #28]
 8001f0c:	2b10      	cmp	r3, #16
 8001f0e:	d112      	bne.n	8001f36 <MotorConfig+0x117e>

	RCC->APB2ENR |= (0x1<<2);
 8001f10:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <MotorConfig+0x11ec>)
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <MotorConfig+0x11ec>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFFF0FFFF;
 8001f1c:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001f26:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x30000);
 8001f28:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	e2df      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_5){
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d115      	bne.n	8001f6a <MotorConfig+0x11b2>
 8001f3e:	8bbb      	ldrh	r3, [r7, #28]
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d112      	bne.n	8001f6a <MotorConfig+0x11b2>

	RCC->APB2ENR |= (0x1<<2);
 8001f44:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <MotorConfig+0x11ec>)
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <MotorConfig+0x11ec>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xFF0FFFFF;
 8001f50:	4a15      	ldr	r2, [pc, #84]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001f5a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x300000);
 8001f5c:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e2c5      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_6){
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d11c      	bne.n	8001fac <MotorConfig+0x11f4>
 8001f72:	8bbb      	ldrh	r3, [r7, #28]
 8001f74:	2b40      	cmp	r3, #64	; 0x40
 8001f76:	d119      	bne.n	8001fac <MotorConfig+0x11f4>

	RCC->APB2ENR |= (0x1<<2);
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <MotorConfig+0x11ec>)
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <MotorConfig+0x11ec>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0xF0FFFFFF;
 8001f84:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001f8e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x3000000);
 8001f90:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <MotorConfig+0x11f0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	e2ab      	b.n	80024f6 <MotorConfig+0x173e>
 8001f9e:	bf00      	nop
 8001fa0:	40010c00 	.word	0x40010c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010800 	.word	0x40010800
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_7){
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	4a92      	ldr	r2, [pc, #584]	; (80021f8 <MotorConfig+0x1440>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d115      	bne.n	8001fe0 <MotorConfig+0x1228>
 8001fb4:	8bbb      	ldrh	r3, [r7, #28]
 8001fb6:	2b80      	cmp	r3, #128	; 0x80
 8001fb8:	d112      	bne.n	8001fe0 <MotorConfig+0x1228>

	RCC->APB2ENR |= (0x1<<2);
 8001fba:	4a90      	ldr	r2, [pc, #576]	; (80021fc <MotorConfig+0x1444>)
 8001fbc:	4b8f      	ldr	r3, [pc, #572]	; (80021fc <MotorConfig+0x1444>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0x0FFFFFFF;
 8001fc6:	4a8c      	ldr	r2, [pc, #560]	; (80021f8 <MotorConfig+0x1440>)
 8001fc8:	4b8b      	ldr	r3, [pc, #556]	; (80021f8 <MotorConfig+0x1440>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001fd0:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x30000000);
 8001fd2:	4a89      	ldr	r2, [pc, #548]	; (80021f8 <MotorConfig+0x1440>)
 8001fd4:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <MotorConfig+0x1440>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e28a      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_8){
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	4a85      	ldr	r2, [pc, #532]	; (80021f8 <MotorConfig+0x1440>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d116      	bne.n	8002016 <MotorConfig+0x125e>
 8001fe8:	8bbb      	ldrh	r3, [r7, #28]
 8001fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fee:	d112      	bne.n	8002016 <MotorConfig+0x125e>

	RCC->APB2ENR |= (0x1<<2);
 8001ff0:	4a82      	ldr	r2, [pc, #520]	; (80021fc <MotorConfig+0x1444>)
 8001ff2:	4b82      	ldr	r3, [pc, #520]	; (80021fc <MotorConfig+0x1444>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFFFFF0;
 8001ffc:	4a7e      	ldr	r2, [pc, #504]	; (80021f8 <MotorConfig+0x1440>)
 8001ffe:	4b7e      	ldr	r3, [pc, #504]	; (80021f8 <MotorConfig+0x1440>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f023 030f 	bic.w	r3, r3, #15
 8002006:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x3);
 8002008:	4a7b      	ldr	r2, [pc, #492]	; (80021f8 <MotorConfig+0x1440>)
 800200a:	4b7b      	ldr	r3, [pc, #492]	; (80021f8 <MotorConfig+0x1440>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f043 0303 	orr.w	r3, r3, #3
 8002012:	6053      	str	r3, [r2, #4]
 8002014:	e26f      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_9){
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	4a77      	ldr	r2, [pc, #476]	; (80021f8 <MotorConfig+0x1440>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d116      	bne.n	800204c <MotorConfig+0x1294>
 800201e:	8bbb      	ldrh	r3, [r7, #28]
 8002020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002024:	d112      	bne.n	800204c <MotorConfig+0x1294>

	RCC->APB2ENR |= (0x1<<2);
 8002026:	4a75      	ldr	r2, [pc, #468]	; (80021fc <MotorConfig+0x1444>)
 8002028:	4b74      	ldr	r3, [pc, #464]	; (80021fc <MotorConfig+0x1444>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFFFF0F;
 8002032:	4a71      	ldr	r2, [pc, #452]	; (80021f8 <MotorConfig+0x1440>)
 8002034:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <MotorConfig+0x1440>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800203c:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x30);
 800203e:	4a6e      	ldr	r2, [pc, #440]	; (80021f8 <MotorConfig+0x1440>)
 8002040:	4b6d      	ldr	r3, [pc, #436]	; (80021f8 <MotorConfig+0x1440>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002048:	6053      	str	r3, [r2, #4]
 800204a:	e254      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_10){
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	4a6a      	ldr	r2, [pc, #424]	; (80021f8 <MotorConfig+0x1440>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d116      	bne.n	8002082 <MotorConfig+0x12ca>
 8002054:	8bbb      	ldrh	r3, [r7, #28]
 8002056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205a:	d112      	bne.n	8002082 <MotorConfig+0x12ca>

	RCC->APB2ENR |= (0x1<<2);
 800205c:	4a67      	ldr	r2, [pc, #412]	; (80021fc <MotorConfig+0x1444>)
 800205e:	4b67      	ldr	r3, [pc, #412]	; (80021fc <MotorConfig+0x1444>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f043 0304 	orr.w	r3, r3, #4
 8002066:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFFF0FF;
 8002068:	4a63      	ldr	r2, [pc, #396]	; (80021f8 <MotorConfig+0x1440>)
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <MotorConfig+0x1440>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002072:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x300);
 8002074:	4a60      	ldr	r2, [pc, #384]	; (80021f8 <MotorConfig+0x1440>)
 8002076:	4b60      	ldr	r3, [pc, #384]	; (80021f8 <MotorConfig+0x1440>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800207e:	6053      	str	r3, [r2, #4]
 8002080:	e239      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_11){
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4a5c      	ldr	r2, [pc, #368]	; (80021f8 <MotorConfig+0x1440>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d116      	bne.n	80020b8 <MotorConfig+0x1300>
 800208a:	8bbb      	ldrh	r3, [r7, #28]
 800208c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002090:	d112      	bne.n	80020b8 <MotorConfig+0x1300>

	RCC->APB2ENR |= (0x1<<2);
 8002092:	4a5a      	ldr	r2, [pc, #360]	; (80021fc <MotorConfig+0x1444>)
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <MotorConfig+0x1444>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFF0FFF;
 800209e:	4a56      	ldr	r2, [pc, #344]	; (80021f8 <MotorConfig+0x1440>)
 80020a0:	4b55      	ldr	r3, [pc, #340]	; (80021f8 <MotorConfig+0x1440>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020a8:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x3000);
 80020aa:	4a53      	ldr	r2, [pc, #332]	; (80021f8 <MotorConfig+0x1440>)
 80020ac:	4b52      	ldr	r3, [pc, #328]	; (80021f8 <MotorConfig+0x1440>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80020b4:	6053      	str	r3, [r2, #4]
 80020b6:	e21e      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_12){
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	4a4f      	ldr	r2, [pc, #316]	; (80021f8 <MotorConfig+0x1440>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d116      	bne.n	80020ee <MotorConfig+0x1336>
 80020c0:	8bbb      	ldrh	r3, [r7, #28]
 80020c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c6:	d112      	bne.n	80020ee <MotorConfig+0x1336>

	RCC->APB2ENR |= (0x1<<2);
 80020c8:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <MotorConfig+0x1444>)
 80020ca:	4b4c      	ldr	r3, [pc, #304]	; (80021fc <MotorConfig+0x1444>)
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFF0FFFF;
 80020d4:	4a48      	ldr	r2, [pc, #288]	; (80021f8 <MotorConfig+0x1440>)
 80020d6:	4b48      	ldr	r3, [pc, #288]	; (80021f8 <MotorConfig+0x1440>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80020de:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x30000);
 80020e0:	4a45      	ldr	r2, [pc, #276]	; (80021f8 <MotorConfig+0x1440>)
 80020e2:	4b45      	ldr	r3, [pc, #276]	; (80021f8 <MotorConfig+0x1440>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80020ea:	6053      	str	r3, [r2, #4]
 80020ec:	e203      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_13){
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4a41      	ldr	r2, [pc, #260]	; (80021f8 <MotorConfig+0x1440>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d116      	bne.n	8002124 <MotorConfig+0x136c>
 80020f6:	8bbb      	ldrh	r3, [r7, #28]
 80020f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020fc:	d112      	bne.n	8002124 <MotorConfig+0x136c>

	RCC->APB2ENR |= (0x1<<2);
 80020fe:	4a3f      	ldr	r2, [pc, #252]	; (80021fc <MotorConfig+0x1444>)
 8002100:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <MotorConfig+0x1444>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFF0FFFFF;
 800210a:	4a3b      	ldr	r2, [pc, #236]	; (80021f8 <MotorConfig+0x1440>)
 800210c:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <MotorConfig+0x1440>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002114:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x300000);
 8002116:	4a38      	ldr	r2, [pc, #224]	; (80021f8 <MotorConfig+0x1440>)
 8002118:	4b37      	ldr	r3, [pc, #220]	; (80021f8 <MotorConfig+0x1440>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002120:	6053      	str	r3, [r2, #4]
 8002122:	e1e8      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_14){
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	4a34      	ldr	r2, [pc, #208]	; (80021f8 <MotorConfig+0x1440>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d116      	bne.n	800215a <MotorConfig+0x13a2>
 800212c:	8bbb      	ldrh	r3, [r7, #28]
 800212e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002132:	d112      	bne.n	800215a <MotorConfig+0x13a2>

	RCC->APB2ENR |= (0x1<<2);
 8002134:	4a31      	ldr	r2, [pc, #196]	; (80021fc <MotorConfig+0x1444>)
 8002136:	4b31      	ldr	r3, [pc, #196]	; (80021fc <MotorConfig+0x1444>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xF0FFFFFF;
 8002140:	4a2d      	ldr	r2, [pc, #180]	; (80021f8 <MotorConfig+0x1440>)
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <MotorConfig+0x1440>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800214a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x3000000);
 800214c:	4a2a      	ldr	r2, [pc, #168]	; (80021f8 <MotorConfig+0x1440>)
 800214e:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <MotorConfig+0x1440>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002156:	6053      	str	r3, [r2, #4]
 8002158:	e1cd      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOA && Port_Pin.backward_pin == GPIO_Pin_15){
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4a26      	ldr	r2, [pc, #152]	; (80021f8 <MotorConfig+0x1440>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d116      	bne.n	8002190 <MotorConfig+0x13d8>
 8002162:	8bbb      	ldrh	r3, [r7, #28]
 8002164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002168:	d112      	bne.n	8002190 <MotorConfig+0x13d8>

	RCC->APB2ENR |= (0x1<<2);
 800216a:	4a24      	ldr	r2, [pc, #144]	; (80021fc <MotorConfig+0x1444>)
 800216c:	4b23      	ldr	r3, [pc, #140]	; (80021fc <MotorConfig+0x1444>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0x0FFFFFFF;
 8002176:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <MotorConfig+0x1440>)
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <MotorConfig+0x1440>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002180:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x30000000);
 8002182:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <MotorConfig+0x1440>)
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <MotorConfig+0x1440>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800218c:	6053      	str	r3, [r2, #4]
 800218e:	e1b2      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_0){
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <MotorConfig+0x1448>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d115      	bne.n	80021c4 <MotorConfig+0x140c>
 8002198:	8bbb      	ldrh	r3, [r7, #28]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d112      	bne.n	80021c4 <MotorConfig+0x140c>

	RCC->APB2ENR |= (0x1<<3);
 800219e:	4a17      	ldr	r2, [pc, #92]	; (80021fc <MotorConfig+0x1444>)
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <MotorConfig+0x1444>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f043 0308 	orr.w	r3, r3, #8
 80021a8:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFFFFFF0;
 80021aa:	4a15      	ldr	r2, [pc, #84]	; (8002200 <MotorConfig+0x1448>)
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <MotorConfig+0x1448>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 030f 	bic.w	r3, r3, #15
 80021b4:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x3);
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <MotorConfig+0x1448>)
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MotorConfig+0x1448>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f043 0303 	orr.w	r3, r3, #3
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e198      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_1){
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <MotorConfig+0x1448>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d11b      	bne.n	8002204 <MotorConfig+0x144c>
 80021cc:	8bbb      	ldrh	r3, [r7, #28]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d118      	bne.n	8002204 <MotorConfig+0x144c>

	RCC->APB2ENR |= (0x1<<3);
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <MotorConfig+0x1444>)
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <MotorConfig+0x1444>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFFFFF0F;
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <MotorConfig+0x1448>)
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <MotorConfig+0x1448>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021e8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x30);
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <MotorConfig+0x1448>)
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <MotorConfig+0x1448>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e17e      	b.n	80024f6 <MotorConfig+0x173e>
 80021f8:	40010800 	.word	0x40010800
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010c00 	.word	0x40010c00
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_2){
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	4a91      	ldr	r2, [pc, #580]	; (800244c <MotorConfig+0x1694>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d115      	bne.n	8002238 <MotorConfig+0x1480>
 800220c:	8bbb      	ldrh	r3, [r7, #28]
 800220e:	2b04      	cmp	r3, #4
 8002210:	d112      	bne.n	8002238 <MotorConfig+0x1480>

	RCC->APB2ENR |= (0x1<<3);
 8002212:	4a8f      	ldr	r2, [pc, #572]	; (8002450 <MotorConfig+0x1698>)
 8002214:	4b8e      	ldr	r3, [pc, #568]	; (8002450 <MotorConfig+0x1698>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFFFF0FF;
 800221e:	4a8b      	ldr	r2, [pc, #556]	; (800244c <MotorConfig+0x1694>)
 8002220:	4b8a      	ldr	r3, [pc, #552]	; (800244c <MotorConfig+0x1694>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002228:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x300);
 800222a:	4a88      	ldr	r2, [pc, #544]	; (800244c <MotorConfig+0x1694>)
 800222c:	4b87      	ldr	r3, [pc, #540]	; (800244c <MotorConfig+0x1694>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e15e      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_3){
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	4a84      	ldr	r2, [pc, #528]	; (800244c <MotorConfig+0x1694>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d115      	bne.n	800226c <MotorConfig+0x14b4>
 8002240:	8bbb      	ldrh	r3, [r7, #28]
 8002242:	2b08      	cmp	r3, #8
 8002244:	d112      	bne.n	800226c <MotorConfig+0x14b4>

	RCC->APB2ENR |= (0x1<<3);
 8002246:	4a82      	ldr	r2, [pc, #520]	; (8002450 <MotorConfig+0x1698>)
 8002248:	4b81      	ldr	r3, [pc, #516]	; (8002450 <MotorConfig+0x1698>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f043 0308 	orr.w	r3, r3, #8
 8002250:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFFF0FFF;
 8002252:	4a7e      	ldr	r2, [pc, #504]	; (800244c <MotorConfig+0x1694>)
 8002254:	4b7d      	ldr	r3, [pc, #500]	; (800244c <MotorConfig+0x1694>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800225c:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x3000);
 800225e:	4a7b      	ldr	r2, [pc, #492]	; (800244c <MotorConfig+0x1694>)
 8002260:	4b7a      	ldr	r3, [pc, #488]	; (800244c <MotorConfig+0x1694>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e144      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_4){
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	4a77      	ldr	r2, [pc, #476]	; (800244c <MotorConfig+0x1694>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d115      	bne.n	80022a0 <MotorConfig+0x14e8>
 8002274:	8bbb      	ldrh	r3, [r7, #28]
 8002276:	2b10      	cmp	r3, #16
 8002278:	d112      	bne.n	80022a0 <MotorConfig+0x14e8>

	RCC->APB2ENR |= (0x1<<3);
 800227a:	4a75      	ldr	r2, [pc, #468]	; (8002450 <MotorConfig+0x1698>)
 800227c:	4b74      	ldr	r3, [pc, #464]	; (8002450 <MotorConfig+0x1698>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f043 0308 	orr.w	r3, r3, #8
 8002284:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFFF0FFFF;
 8002286:	4a71      	ldr	r2, [pc, #452]	; (800244c <MotorConfig+0x1694>)
 8002288:	4b70      	ldr	r3, [pc, #448]	; (800244c <MotorConfig+0x1694>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002290:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x30000);
 8002292:	4a6e      	ldr	r2, [pc, #440]	; (800244c <MotorConfig+0x1694>)
 8002294:	4b6d      	ldr	r3, [pc, #436]	; (800244c <MotorConfig+0x1694>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e12a      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_5){
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	4a6a      	ldr	r2, [pc, #424]	; (800244c <MotorConfig+0x1694>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d115      	bne.n	80022d4 <MotorConfig+0x151c>
 80022a8:	8bbb      	ldrh	r3, [r7, #28]
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d112      	bne.n	80022d4 <MotorConfig+0x151c>

	RCC->APB2ENR |= (0x1<<3);
 80022ae:	4a68      	ldr	r2, [pc, #416]	; (8002450 <MotorConfig+0x1698>)
 80022b0:	4b67      	ldr	r3, [pc, #412]	; (8002450 <MotorConfig+0x1698>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f043 0308 	orr.w	r3, r3, #8
 80022b8:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xFF0FFFFF;
 80022ba:	4a64      	ldr	r2, [pc, #400]	; (800244c <MotorConfig+0x1694>)
 80022bc:	4b63      	ldr	r3, [pc, #396]	; (800244c <MotorConfig+0x1694>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80022c4:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x300000);
 80022c6:	4a61      	ldr	r2, [pc, #388]	; (800244c <MotorConfig+0x1694>)
 80022c8:	4b60      	ldr	r3, [pc, #384]	; (800244c <MotorConfig+0x1694>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e110      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_6){
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	4a5d      	ldr	r2, [pc, #372]	; (800244c <MotorConfig+0x1694>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d115      	bne.n	8002308 <MotorConfig+0x1550>
 80022dc:	8bbb      	ldrh	r3, [r7, #28]
 80022de:	2b40      	cmp	r3, #64	; 0x40
 80022e0:	d112      	bne.n	8002308 <MotorConfig+0x1550>

	RCC->APB2ENR |= (0x1<<3);
 80022e2:	4a5b      	ldr	r2, [pc, #364]	; (8002450 <MotorConfig+0x1698>)
 80022e4:	4b5a      	ldr	r3, [pc, #360]	; (8002450 <MotorConfig+0x1698>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0xF0FFFFFF;
 80022ee:	4a57      	ldr	r2, [pc, #348]	; (800244c <MotorConfig+0x1694>)
 80022f0:	4b56      	ldr	r3, [pc, #344]	; (800244c <MotorConfig+0x1694>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80022f8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x3000000);
 80022fa:	4a54      	ldr	r2, [pc, #336]	; (800244c <MotorConfig+0x1694>)
 80022fc:	4b53      	ldr	r3, [pc, #332]	; (800244c <MotorConfig+0x1694>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e0f6      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_7){
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	4a50      	ldr	r2, [pc, #320]	; (800244c <MotorConfig+0x1694>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d115      	bne.n	800233c <MotorConfig+0x1584>
 8002310:	8bbb      	ldrh	r3, [r7, #28]
 8002312:	2b80      	cmp	r3, #128	; 0x80
 8002314:	d112      	bne.n	800233c <MotorConfig+0x1584>

	RCC->APB2ENR |= (0x1<<3);
 8002316:	4a4e      	ldr	r2, [pc, #312]	; (8002450 <MotorConfig+0x1698>)
 8002318:	4b4d      	ldr	r3, [pc, #308]	; (8002450 <MotorConfig+0x1698>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f043 0308 	orr.w	r3, r3, #8
 8002320:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0x0FFFFFFF;
 8002322:	4a4a      	ldr	r2, [pc, #296]	; (800244c <MotorConfig+0x1694>)
 8002324:	4b49      	ldr	r3, [pc, #292]	; (800244c <MotorConfig+0x1694>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800232c:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x3000000);
 800232e:	4a47      	ldr	r2, [pc, #284]	; (800244c <MotorConfig+0x1694>)
 8002330:	4b46      	ldr	r3, [pc, #280]	; (800244c <MotorConfig+0x1694>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e0dc      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_8){
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	4a43      	ldr	r2, [pc, #268]	; (800244c <MotorConfig+0x1694>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d116      	bne.n	8002372 <MotorConfig+0x15ba>
 8002344:	8bbb      	ldrh	r3, [r7, #28]
 8002346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800234a:	d112      	bne.n	8002372 <MotorConfig+0x15ba>

	RCC->APB2ENR |= (0x1<<3);
 800234c:	4a40      	ldr	r2, [pc, #256]	; (8002450 <MotorConfig+0x1698>)
 800234e:	4b40      	ldr	r3, [pc, #256]	; (8002450 <MotorConfig+0x1698>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f043 0308 	orr.w	r3, r3, #8
 8002356:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFFFFFFF0;
 8002358:	4a3c      	ldr	r2, [pc, #240]	; (800244c <MotorConfig+0x1694>)
 800235a:	4b3c      	ldr	r3, [pc, #240]	; (800244c <MotorConfig+0x1694>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f023 030f 	bic.w	r3, r3, #15
 8002362:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x3);
 8002364:	4a39      	ldr	r2, [pc, #228]	; (800244c <MotorConfig+0x1694>)
 8002366:	4b39      	ldr	r3, [pc, #228]	; (800244c <MotorConfig+0x1694>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f043 0303 	orr.w	r3, r3, #3
 800236e:	6053      	str	r3, [r2, #4]
 8002370:	e0c1      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_9){
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4a35      	ldr	r2, [pc, #212]	; (800244c <MotorConfig+0x1694>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d116      	bne.n	80023a8 <MotorConfig+0x15f0>
 800237a:	8bbb      	ldrh	r3, [r7, #28]
 800237c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002380:	d112      	bne.n	80023a8 <MotorConfig+0x15f0>

	RCC->APB2ENR |= (0x1<<3);
 8002382:	4a33      	ldr	r2, [pc, #204]	; (8002450 <MotorConfig+0x1698>)
 8002384:	4b32      	ldr	r3, [pc, #200]	; (8002450 <MotorConfig+0x1698>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFFFFFF0F;
 800238e:	4a2f      	ldr	r2, [pc, #188]	; (800244c <MotorConfig+0x1694>)
 8002390:	4b2e      	ldr	r3, [pc, #184]	; (800244c <MotorConfig+0x1694>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002398:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x30);
 800239a:	4a2c      	ldr	r2, [pc, #176]	; (800244c <MotorConfig+0x1694>)
 800239c:	4b2b      	ldr	r3, [pc, #172]	; (800244c <MotorConfig+0x1694>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80023a4:	6053      	str	r3, [r2, #4]
 80023a6:	e0a6      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_10){
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	4a28      	ldr	r2, [pc, #160]	; (800244c <MotorConfig+0x1694>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d116      	bne.n	80023de <MotorConfig+0x1626>
 80023b0:	8bbb      	ldrh	r3, [r7, #28]
 80023b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b6:	d112      	bne.n	80023de <MotorConfig+0x1626>

	RCC->APB2ENR |= (0x1<<3);
 80023b8:	4a25      	ldr	r2, [pc, #148]	; (8002450 <MotorConfig+0x1698>)
 80023ba:	4b25      	ldr	r3, [pc, #148]	; (8002450 <MotorConfig+0x1698>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f043 0308 	orr.w	r3, r3, #8
 80023c2:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFFFFF0FF;
 80023c4:	4a21      	ldr	r2, [pc, #132]	; (800244c <MotorConfig+0x1694>)
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <MotorConfig+0x1694>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023ce:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x300);
 80023d0:	4a1e      	ldr	r2, [pc, #120]	; (800244c <MotorConfig+0x1694>)
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <MotorConfig+0x1694>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80023da:	6053      	str	r3, [r2, #4]
 80023dc:	e08b      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_11){
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4a1a      	ldr	r2, [pc, #104]	; (800244c <MotorConfig+0x1694>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d116      	bne.n	8002414 <MotorConfig+0x165c>
 80023e6:	8bbb      	ldrh	r3, [r7, #28]
 80023e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ec:	d112      	bne.n	8002414 <MotorConfig+0x165c>

	RCC->APB2ENR |= (0x1<<3);
 80023ee:	4a18      	ldr	r2, [pc, #96]	; (8002450 <MotorConfig+0x1698>)
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <MotorConfig+0x1698>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f043 0308 	orr.w	r3, r3, #8
 80023f8:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFFFF0FFF;
 80023fa:	4a14      	ldr	r2, [pc, #80]	; (800244c <MotorConfig+0x1694>)
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <MotorConfig+0x1694>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002404:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x3000);
 8002406:	4a11      	ldr	r2, [pc, #68]	; (800244c <MotorConfig+0x1694>)
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <MotorConfig+0x1694>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002410:	6053      	str	r3, [r2, #4]
 8002412:	e070      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_12){
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	4a0d      	ldr	r2, [pc, #52]	; (800244c <MotorConfig+0x1694>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d11b      	bne.n	8002454 <MotorConfig+0x169c>
 800241c:	8bbb      	ldrh	r3, [r7, #28]
 800241e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002422:	d117      	bne.n	8002454 <MotorConfig+0x169c>

	RCC->APB2ENR |= (0x1<<3);
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <MotorConfig+0x1698>)
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <MotorConfig+0x1698>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFFF0FFFF;
 8002430:	4a06      	ldr	r2, [pc, #24]	; (800244c <MotorConfig+0x1694>)
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <MotorConfig+0x1694>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800243a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x30000);
 800243c:	4a03      	ldr	r2, [pc, #12]	; (800244c <MotorConfig+0x1694>)
 800243e:	4b03      	ldr	r3, [pc, #12]	; (800244c <MotorConfig+0x1694>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002446:	6053      	str	r3, [r2, #4]
 8002448:	e055      	b.n	80024f6 <MotorConfig+0x173e>
 800244a:	bf00      	nop
 800244c:	40010c00 	.word	0x40010c00
 8002450:	40021000 	.word	0x40021000
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_13){
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	4a2a      	ldr	r2, [pc, #168]	; (8002500 <MotorConfig+0x1748>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d116      	bne.n	800248a <MotorConfig+0x16d2>
 800245c:	8bbb      	ldrh	r3, [r7, #28]
 800245e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002462:	d112      	bne.n	800248a <MotorConfig+0x16d2>

	RCC->APB2ENR |= (0x1<<3);
 8002464:	4a27      	ldr	r2, [pc, #156]	; (8002504 <MotorConfig+0x174c>)
 8002466:	4b27      	ldr	r3, [pc, #156]	; (8002504 <MotorConfig+0x174c>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f043 0308 	orr.w	r3, r3, #8
 800246e:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xFF0FFFFF;
 8002470:	4a23      	ldr	r2, [pc, #140]	; (8002500 <MotorConfig+0x1748>)
 8002472:	4b23      	ldr	r3, [pc, #140]	; (8002500 <MotorConfig+0x1748>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800247a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x300000);
 800247c:	4a20      	ldr	r2, [pc, #128]	; (8002500 <MotorConfig+0x1748>)
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <MotorConfig+0x1748>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002486:	6053      	str	r3, [r2, #4]
 8002488:	e035      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_14){
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	4a1c      	ldr	r2, [pc, #112]	; (8002500 <MotorConfig+0x1748>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d116      	bne.n	80024c0 <MotorConfig+0x1708>
 8002492:	8bbb      	ldrh	r3, [r7, #28]
 8002494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002498:	d112      	bne.n	80024c0 <MotorConfig+0x1708>

	RCC->APB2ENR |= (0x1<<3);
 800249a:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <MotorConfig+0x174c>)
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <MotorConfig+0x174c>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f043 0308 	orr.w	r3, r3, #8
 80024a4:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0xF0FFFFFF;
 80024a6:	4a16      	ldr	r2, [pc, #88]	; (8002500 <MotorConfig+0x1748>)
 80024a8:	4b15      	ldr	r3, [pc, #84]	; (8002500 <MotorConfig+0x1748>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80024b0:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x3000000);
 80024b2:	4a13      	ldr	r2, [pc, #76]	; (8002500 <MotorConfig+0x1748>)
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <MotorConfig+0x1748>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80024bc:	6053      	str	r3, [r2, #4]
 80024be:	e01a      	b.n	80024f6 <MotorConfig+0x173e>
}
else if (Port_Pin.backward_port == GPIOB && Port_Pin.backward_pin == GPIO_Pin_15){
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	4a0f      	ldr	r2, [pc, #60]	; (8002500 <MotorConfig+0x1748>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d116      	bne.n	80024f6 <MotorConfig+0x173e>
 80024c8:	8bbb      	ldrh	r3, [r7, #28]
 80024ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ce:	d112      	bne.n	80024f6 <MotorConfig+0x173e>

	RCC->APB2ENR |= (0x1<<3);
 80024d0:	4a0c      	ldr	r2, [pc, #48]	; (8002504 <MotorConfig+0x174c>)
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <MotorConfig+0x174c>)
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f043 0308 	orr.w	r3, r3, #8
 80024da:	6193      	str	r3, [r2, #24]
	GPIOB->CRH &= 0x0FFFFFFF;
 80024dc:	4a08      	ldr	r2, [pc, #32]	; (8002500 <MotorConfig+0x1748>)
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <MotorConfig+0x1748>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80024e6:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (0x30000000);
 80024e8:	4a05      	ldr	r2, [pc, #20]	; (8002500 <MotorConfig+0x1748>)
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <MotorConfig+0x1748>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80024f2:	6053      	str	r3, [r2, #4]
}
}
 80024f4:	e7ff      	b.n	80024f6 <MotorConfig+0x173e>
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc90      	pop	{r4, r7}
 80024fc:	b004      	add	sp, #16
 80024fe:	4770      	bx	lr
 8002500:	40010c00 	.word	0x40010c00
 8002504:	40021000 	.word	0x40021000

08002508 <Motor_Stop>:

	Port_Pin.backward_port->BSRR = Port_Pin.backward_pin;	// high voltage for backward pin
	Port_Pin.forward_port->BRR = Port_Pin.forward_pin;		// low voltage for forward pin
	}
}
void Motor_Stop(Motor Port_Pin){		// Stop function for selected motor
 8002508:	b084      	sub	sp, #16
 800250a:	b490      	push	{r4, r7}
 800250c:	af00      	add	r7, sp, #0
 800250e:	f107 0408 	add.w	r4, r7, #8
 8002512:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	Port_Pin.forward_port->BRR = Port_Pin.forward_pin;		// low voltage for backward pin
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	8aba      	ldrh	r2, [r7, #20]
 800251a:	615a      	str	r2, [r3, #20]
	Port_Pin.backward_port->BRR = Port_Pin.backward_pin;		// low voltage for forward pin
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	8bba      	ldrh	r2, [r7, #28]
 8002520:	615a      	str	r2, [r3, #20]
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	bc90      	pop	{r4, r7}
 8002528:	b004      	add	sp, #16
 800252a:	4770      	bx	lr

0800252c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800252c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002564 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002530:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002532:	e003      	b.n	800253c <LoopCopyDataInit>

08002534 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002536:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002538:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800253a:	3104      	adds	r1, #4

0800253c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800253c:	480b      	ldr	r0, [pc, #44]	; (800256c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002540:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002542:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002544:	d3f6      	bcc.n	8002534 <CopyDataInit>
	ldr	r2, =_sbss
 8002546:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002548:	e002      	b.n	8002550 <LoopFillZerobss>

0800254a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800254a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800254c:	f842 3b04 	str.w	r3, [r2], #4

08002550 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002552:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002554:	d3f9      	bcc.n	800254a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002556:	f000 f837 	bl	80025c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800255a:	f000 f95b 	bl	8002814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800255e:	f7fe f8c1 	bl	80006e4 <main>
	bx	lr
 8002562:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002564:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8002568:	0800287c 	.word	0x0800287c
	ldr	r0, =_sdata
 800256c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002570:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8002574:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8002578:	2000004c 	.word	0x2000004c

0800257c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800257c:	e7fe      	b.n	800257c <ADC1_2_IRQHandler>

0800257e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800258e:	e7fe      	b.n	800258e <HardFault_Handler+0x4>

08002590 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002594:	e7fe      	b.n	8002594 <MemManage_Handler+0x4>

08002596 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800259a:	e7fe      	b.n	800259a <BusFault_Handler+0x4>

0800259c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <UsageFault_Handler+0x4>

080025a2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
	...

080025c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80025cc:	4a15      	ldr	r2, [pc, #84]	; (8002624 <SystemInit+0x5c>)
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <SystemInit+0x5c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80025d8:	4912      	ldr	r1, [pc, #72]	; (8002624 <SystemInit+0x5c>)
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <SystemInit+0x5c>)
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <SystemInit+0x60>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80025e4:	4a0f      	ldr	r2, [pc, #60]	; (8002624 <SystemInit+0x5c>)
 80025e6:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <SystemInit+0x5c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80025ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80025f4:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <SystemInit+0x5c>)
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <SystemInit+0x5c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002600:	4a08      	ldr	r2, [pc, #32]	; (8002624 <SystemInit+0x5c>)
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <SystemInit+0x5c>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800260a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SystemInit+0x5c>)
 800260e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002612:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002614:	f000 f878 	bl	8002708 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <SystemInit+0x64>)
 800261a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800261e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	f8ff0000 	.word	0xf8ff0000
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002642:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <SystemCoreClockUpdate+0xc4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b04      	cmp	r3, #4
 8002650:	d007      	beq.n	8002662 <SystemCoreClockUpdate+0x32>
 8002652:	2b08      	cmp	r3, #8
 8002654:	d009      	beq.n	800266a <SystemCoreClockUpdate+0x3a>
 8002656:	2b00      	cmp	r3, #0
 8002658:	d133      	bne.n	80026c2 <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800265a:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <SystemCoreClockUpdate+0xc8>)
 800265c:	4a27      	ldr	r2, [pc, #156]	; (80026fc <SystemCoreClockUpdate+0xcc>)
 800265e:	601a      	str	r2, [r3, #0]
      break;
 8002660:	e033      	b.n	80026ca <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8002662:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <SystemCoreClockUpdate+0xc8>)
 8002664:	4a25      	ldr	r2, [pc, #148]	; (80026fc <SystemCoreClockUpdate+0xcc>)
 8002666:	601a      	str	r2, [r3, #0]
      break;
 8002668:	e02f      	b.n	80026ca <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <SystemCoreClockUpdate+0xc4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002672:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002674:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <SystemCoreClockUpdate+0xc4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267c:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	0c9b      	lsrs	r3, r3, #18
 8002682:	3302      	adds	r3, #2
 8002684:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d106      	bne.n	800269a <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <SystemCoreClockUpdate+0xd0>)
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <SystemCoreClockUpdate+0xc8>)
 8002696:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8002698:	e017      	b.n	80026ca <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <SystemCoreClockUpdate+0xc4>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d006      	beq.n	80026b4 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	4a15      	ldr	r2, [pc, #84]	; (8002700 <SystemCoreClockUpdate+0xd0>)
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <SystemCoreClockUpdate+0xc8>)
 80026b0:	6013      	str	r3, [r2, #0]
      break;
 80026b2:	e00a      	b.n	80026ca <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4a11      	ldr	r2, [pc, #68]	; (80026fc <SystemCoreClockUpdate+0xcc>)
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <SystemCoreClockUpdate+0xc8>)
 80026be:	6013      	str	r3, [r2, #0]
      break;
 80026c0:	e003      	b.n	80026ca <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <SystemCoreClockUpdate+0xc8>)
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <SystemCoreClockUpdate+0xcc>)
 80026c6:	601a      	str	r2, [r3, #0]
      break;
 80026c8:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <SystemCoreClockUpdate+0xc4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <SystemCoreClockUpdate+0xd4>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <SystemCoreClockUpdate+0xc8>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	fa22 f303 	lsr.w	r3, r2, r3
 80026e6:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <SystemCoreClockUpdate+0xc8>)
 80026e8:	6013      	str	r3, [r2, #0]
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	40021000 	.word	0x40021000
 80026f8:	20000000 	.word	0x20000000
 80026fc:	007a1200 	.word	0x007a1200
 8002700:	003d0900 	.word	0x003d0900
 8002704:	20000004 	.word	0x20000004

08002708 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800270c:	f000 f802 	bl	8002714 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}

08002714 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	2300      	movs	r3, #0
 8002720:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002722:	4a3a      	ldr	r2, [pc, #232]	; (800280c <SetSysClockTo72+0xf8>)
 8002724:	4b39      	ldr	r3, [pc, #228]	; (800280c <SetSysClockTo72+0xf8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800272e:	4b37      	ldr	r3, [pc, #220]	; (800280c <SetSysClockTo72+0xf8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3301      	adds	r3, #1
 800273c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d103      	bne.n	800274c <SetSysClockTo72+0x38>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800274a:	d1f0      	bne.n	800272e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800274c:	4b2f      	ldr	r3, [pc, #188]	; (800280c <SetSysClockTo72+0xf8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002758:	2301      	movs	r3, #1
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	e001      	b.n	8002762 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800275e:	2300      	movs	r3, #0
 8002760:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d14b      	bne.n	8002800 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002768:	4a29      	ldr	r2, [pc, #164]	; (8002810 <SetSysClockTo72+0xfc>)
 800276a:	4b29      	ldr	r3, [pc, #164]	; (8002810 <SetSysClockTo72+0xfc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f043 0310 	orr.w	r3, r3, #16
 8002772:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002774:	4a26      	ldr	r2, [pc, #152]	; (8002810 <SetSysClockTo72+0xfc>)
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <SetSysClockTo72+0xfc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002780:	4a23      	ldr	r2, [pc, #140]	; (8002810 <SetSysClockTo72+0xfc>)
 8002782:	4b23      	ldr	r3, [pc, #140]	; (8002810 <SetSysClockTo72+0xfc>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f043 0302 	orr.w	r3, r3, #2
 800278a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800278c:	4a1f      	ldr	r2, [pc, #124]	; (800280c <SetSysClockTo72+0xf8>)
 800278e:	4b1f      	ldr	r3, [pc, #124]	; (800280c <SetSysClockTo72+0xf8>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002794:	4a1d      	ldr	r2, [pc, #116]	; (800280c <SetSysClockTo72+0xf8>)
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <SetSysClockTo72+0xf8>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800279c:	4a1b      	ldr	r2, [pc, #108]	; (800280c <SetSysClockTo72+0xf8>)
 800279e:	4b1b      	ldr	r3, [pc, #108]	; (800280c <SetSysClockTo72+0xf8>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80027a8:	4a18      	ldr	r2, [pc, #96]	; (800280c <SetSysClockTo72+0xf8>)
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <SetSysClockTo72+0xf8>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80027b2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80027b4:	4a15      	ldr	r2, [pc, #84]	; (800280c <SetSysClockTo72+0xf8>)
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <SetSysClockTo72+0xf8>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80027be:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80027c0:	4a12      	ldr	r2, [pc, #72]	; (800280c <SetSysClockTo72+0xf8>)
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <SetSysClockTo72+0xf8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80027cc:	bf00      	nop
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <SetSysClockTo72+0xf8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f9      	beq.n	80027ce <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80027da:	4a0c      	ldr	r2, [pc, #48]	; (800280c <SetSysClockTo72+0xf8>)
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <SetSysClockTo72+0xf8>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 0303 	bic.w	r3, r3, #3
 80027e4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80027e6:	4a09      	ldr	r2, [pc, #36]	; (800280c <SetSysClockTo72+0xf8>)
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <SetSysClockTo72+0xf8>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80027f2:	bf00      	nop
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <SetSysClockTo72+0xf8>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d1f9      	bne.n	80027f4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	40022000 	.word	0x40022000

08002814 <__libc_init_array>:
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	2500      	movs	r5, #0
 8002818:	4e0c      	ldr	r6, [pc, #48]	; (800284c <__libc_init_array+0x38>)
 800281a:	4c0d      	ldr	r4, [pc, #52]	; (8002850 <__libc_init_array+0x3c>)
 800281c:	1ba4      	subs	r4, r4, r6
 800281e:	10a4      	asrs	r4, r4, #2
 8002820:	42a5      	cmp	r5, r4
 8002822:	d109      	bne.n	8002838 <__libc_init_array+0x24>
 8002824:	f000 f81a 	bl	800285c <_init>
 8002828:	2500      	movs	r5, #0
 800282a:	4e0a      	ldr	r6, [pc, #40]	; (8002854 <__libc_init_array+0x40>)
 800282c:	4c0a      	ldr	r4, [pc, #40]	; (8002858 <__libc_init_array+0x44>)
 800282e:	1ba4      	subs	r4, r4, r6
 8002830:	10a4      	asrs	r4, r4, #2
 8002832:	42a5      	cmp	r5, r4
 8002834:	d105      	bne.n	8002842 <__libc_init_array+0x2e>
 8002836:	bd70      	pop	{r4, r5, r6, pc}
 8002838:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800283c:	4798      	blx	r3
 800283e:	3501      	adds	r5, #1
 8002840:	e7ee      	b.n	8002820 <__libc_init_array+0xc>
 8002842:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002846:	4798      	blx	r3
 8002848:	3501      	adds	r5, #1
 800284a:	e7f2      	b.n	8002832 <__libc_init_array+0x1e>
 800284c:	08002874 	.word	0x08002874
 8002850:	08002874 	.word	0x08002874
 8002854:	08002874 	.word	0x08002874
 8002858:	08002878 	.word	0x08002878

0800285c <_init>:
 800285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285e:	bf00      	nop
 8002860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002862:	bc08      	pop	{r3}
 8002864:	469e      	mov	lr, r3
 8002866:	4770      	bx	lr

08002868 <_fini>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	bf00      	nop
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr
